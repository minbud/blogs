{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/minbud.png","path":"img/minbud.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"feb9d0c6ee9cb46b72112a7b8764c88a51ac6b24","modified":1531066818000},{"_id":"themes/yilia/.DS_Store","hash":"9cb988f4f5ab30a7765806dadf673ffc9d4a3f5d","modified":1528621563000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1528515315000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1528515315000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1528515315000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1528515315000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1528515315000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1528515315000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1528515315000},{"_id":"themes/yilia/_config.yml","hash":"0078d7510f622c111a2f66885c1891b1deebab39","modified":1528623686000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1528515315000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1528515315000},{"_id":"source/_posts/.DS_Store","hash":"034bf5a02b12b8350da156edc441eb91516d734c","modified":1531066713000},{"_id":"source/_posts/Github-Pages-hexo.md","hash":"094e712df03419ef440e47e7dce44f4f9a365548","modified":1530443593000},{"_id":"source/_posts/Boot-Singlecore.md","hash":"2c50f0a0ae27f53564b56b9d1e5867c8025971ca","modified":1530679449000},{"_id":"source/_posts/New-to-C6678-CSS.md","hash":"8ce105ad640f7c4387f48315b4fe28b5e1c8ffd6","modified":1530633190000},{"_id":"source/_posts/boot-multicore.md","hash":"a399d2aeb87e9bf83338e1b91a23548303b4933a","modified":1531067299000},{"_id":"source/_posts/ethernet.md","hash":"1fcd70db9fd3736dca058eb0687b38f608494e48","modified":1529759182000},{"_id":"source/_posts/routerap.md","hash":"a5396b929d65b951992efb9c89a9d4598a87030b","modified":1531067181000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1528515315000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1528515315000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1528515315000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1528515315000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1528515315000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1528515315000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1528515315000},{"_id":"themes/yilia/layout/.DS_Store","hash":"5124d1d942e323d7d9c4701d37addca544400378","modified":1528621563000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1528515315000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1528515315000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1528515315000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1528515315000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1528515315000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1528515315000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1528515315000},{"_id":"themes/yilia/source/.DS_Store","hash":"03239680b99a1a5cd1d9f6e24470635058e9ace3","modified":1528532778000},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1528515315000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1528515315000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1528515315000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528515315000},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1528515315000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1528515315000},{"_id":"source/_posts/Github-Pages-hexo/1.png","hash":"886f62d9ad662c7f52e9ce7bee7f71604a9e427c","modified":1528615120000},{"_id":"source/_posts/Github-Pages-hexo/2.png","hash":"2b0ca5e4fca71b184abbab23c0aa8dc26d732dcd","modified":1528626205000},{"_id":"source/_posts/New-to-C6678-CSS/hua_com4_config.png","hash":"760906b7de55b97d49eaefade1a83b215b2650df","modified":1530416282000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"a80e32a0b518c7a12deaad80af65e5598958304a","modified":1528525878000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1528515315000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1528515315000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1528515315000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1528515315000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1528515315000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1528515315000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1528515315000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1528515315000},{"_id":"themes/yilia/source/img/favicon.png","hash":"a3cf8fd610729bfe77c2e9c4a53f494e6ea7ecd9","modified":1528526450000},{"_id":"themes/yilia/source/img/minbud.png","hash":"85d8596e03311c54ddb29476530513875e3efb22","modified":1528519113000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1528515315000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1528515315000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1528515315000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1528515315000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1528515315000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1528515315000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1528515315000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1528515315000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1528515315000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1528515315000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1528515315000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1528515315000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1528515315000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1528515315000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1528515315000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1528515315000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1528515315000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1528515315000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1528515315000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1528515315000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1528515315000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1528515315000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1528515315000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1528515315000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1528515315000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1528515315000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1528515315000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1528515315000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1528515315000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1528515315000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1528515315000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1528515315000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1528515315000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1528515315000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1528515315000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1528515315000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1528515315000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1528515315000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1528515315000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1528515315000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1528515315000},{"_id":"source/_posts/Boot-Singlecore/boot_table_format.png","hash":"e2508b44160b57fef973d02cdc09ef921be7bb4a","modified":1530599768000},{"_id":"source/_posts/New-to-C6678-CSS/hua_ipconfig.png","hash":"8693672b8472f2d798c092181662fcfa9bcec9f1","modified":1530416282000},{"_id":"source/_posts/boot-multicore/boot_multicore_madprocedure.png","hash":"545b3c2a3c5150180dfa4a454bbcfb2ffe3f584d","modified":1531024754000},{"_id":"source/_posts/boot-multicore/multi_image_1core.png","hash":"3cc3a26ad145f79947fed70e8d4c79bcd47e1ae7","modified":1531024754000},{"_id":"source/_posts/boot-multicore/multi_image_8cores.png","hash":"aeb209872706a653294f5f809ad8100f707d4ce7","modified":1531024754000},{"_id":"source/_posts/boot-multicore/multi_image_html.png","hash":"b63c3216b2c010118b31006fae0edce3ef857efb","modified":1531024754000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1528515315000},{"_id":"source/_posts/Boot-Singlecore/post_result.png","hash":"66d5df68df6440a0f589e196f3bc7fd4258974b5","modified":1530599768000},{"_id":"source/_posts/Github-Pages-hexo/3.png","hash":"c703978ca2213c1259eec116cae70976449ced17","modified":1528626224000},{"_id":"source/_posts/New-to-C6678-CSS/hua_com4.png","hash":"6bbe9294e2f581fe4d9b73905349d2e2da195279","modified":1530416282000},{"_id":"source/_posts/boot-multicore/boot_multicore_image_com4.png","hash":"1cc12e03a3664575d2123f497f0297407f563021","modified":1531024754000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1528515315000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1528515315000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1528515315000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1528515315000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1528515315000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1528515315000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1528515315000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1528515315000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1528515315000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1528515315000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1528515315000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1528515315000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1528515315000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1528515315000},{"_id":"source/_posts/New-to-C6678-CSS/hua_html_index.png","hash":"fcf157bf120d1da7452ed12ec8e5a438e63323e9","modified":1530416282000},{"_id":"source/_posts/boot-multicore/boot_multicore_image_result.png","hash":"0bc2e7bfb17db1c70dfe554b6d895f89d51ed5ae","modified":1531024754000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Github-Pages&hexo","date":"2018-06-10T10:18:24.000Z","_content":"\n使用 *github-pages+ hexo* 搭建个人博客-Mac环境\n======================================\n<p align=\"right\">--搭建&主题更换&博客备份\n--------------------------------------\n\n## 1. 准备工作-github仓库\n　　首先到github的官网注册账号（...）。然后，新建仓库，在仓库Setting页面：\n　　![img](Github-Pages&hexo/1.png)\n　　<!-- more -->\n　　在setting页面下修改自己仓库的名字，注意格式要是 *yourusername* .github.io,比如我的就是minbud.github.io, 这样之后才能启用Pages并用 *yourusername* .github.io访问自己的博客，当然也可以绑定自己已有的域名\n　　![img](Github-Pages&hexo/2.png)\n　  找到Github Pages页面，选择publish，完成后就是这样：\n　  ![img](Github-Pages&hexo/3.png)\n\n## 2. 安装hexo\n　  由于hexo基于node.js，需要先从[官网](https://nodejs.org/)下载nodejs安装包。\n　  \n　  安装好后，用下面的命令可以查看版本（npm是nodejs的安装包管理器）\n> npm -v\n\n　  然后，使用npm命令安装hexo\n> sudo npm install -g hexo-cli 　  　  *-安装(-g表示全局安装)-*\n> sudo npm uninstall -g hexo-cli 　  　  *-卸载-*\n\n　  可以用hexo -v命令查看是否安装成功\n    \n　  新建一个文件夹，并在该文件夹下执行接下来的操作(以我的为例)\n> sudo mkdir ~/Documents/hexo\n> cd ~/Documents/hexo\n> hexo init　  　  -进行hexo的初始化工作，会在该文件夹下生成一系列必要文件-\n> npm install\n> npm install hexo-deployer-git -save        -安装部署工具-\n\n　  配置hexo，修改更目录下的_config.yml文件\n> \\#Site\n> title: MinBud的博客\n> subtitle: Walk Slow & Think Deep\n> description:\n> keywords:\n> author: Minbud\n> language:\n> timezone:\n\n　  最主要的是下面的配置项，在最末尾添加如下配置，可以设置部署时的push地址\n> deploy:\n>type: git\n>repo: http://github.com/minbud/minbud.github.io.git\n>branch: master\n\n　  博客文件使用markdown格式，放在./source/_post文件夹中，可以在终端新建博客文件\n> hexo new \"myFirstBlog\"\n\n　  编写完博客后，使用以下命令可以生成静态网页并部署到github中\n\n> hexo clean\n> hexo generate　  　  -生成博客网页的各种静态文件-\n> hexo server　  　  -在本地启动服务器，在浏览器访问http://localhost:4000/ 预览-\n> hexo deploy 　  -将博客网页推送到服务器-\n\n## 3. 更换主题\n　  经过上面步骤后可以得到一个拥有默认主题的hexo博客，另外还有许多第三方制作的精美的主题可以供我们使用，我用的是Litten的yilia\n　  \n> cd ~/Documents/hexo\n> git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n\n　  会在./themes目录下拷贝yilia主题，需要在_config.yml中修改主题名称从而应用主题\n　  另外需要对主题进行一定的修改，实现一定程度的定制，可以修改yilia文件夹下的_congfig.yml文件\n> favicon: img/favicon.png　  　  -修改头像-\n> avatar: img/minbud.png　  　  -修改网页标签栏图标-\n\n　  由于生成的网页文件在hexo文件夹根目录下，可以将图片放在hexo/img/路径下，并如上设置\n　  另外主题右下角有作者Litten的标签，有人可能不喜欢（比如我）,可以修改脚本文件将其去掉。index.html是生成的静态文件，直接修改只能生效一次或以后每次都得改。可以修改hexo/themes/yilia/layout/_partial/footer.ejs文件，将footer-right相关项删除就好了\n\n　  在首页不显示博客的全部内容，需要在文章中需要截断的地方加入\n> <\\!\\-\\- more \\-\\-\\>\n\n　  \n## 4. 备份博客\n　  在本地文件夹中存有你的各种博客文件（.md），但是部署到github上的时候实际上只是将生成的静态博客网页和各种使用到的资源文件push上去了，万一本地文件丢失了，靠github上的文件难以恢复原来的博客文件。\n　  可以在原仓库中创建分支，作为备份分支来解决这个问题\n　  \n　  在github网页上创建新分支，可以命名为hexo，在setting选项卡上找到branch，将默认分支设为hexo\n　  新建文件夹，将博客仓库clone到里面，并将之前文件夹中的_config.yml，themes/，source，scffolds/，package.json，复制进来\n　  将themes/yilia/.git/ 文件夹删除，否则无法push该文件夹\n　  执行\n> npm install\n> npm install hexo-deployer-git -save\n> git checkout hexo\n> git remote add origin https://github.com/minbud/minbud.github.io.git\n> git add .\n> git commit -m \"备份博客\"\n> git push origin hexo\n\n　  成功后，在github网页上切换到hexo分支，可以看到文件夹下的文件都被传上来了，以后需要备份的时候使用git命令就可以了\n　  \n## 5. 在博客中添加图片\n\n　  编辑_config.yml文件，确认 *post_asset_folder:true*\n　  在根目录下安装\n> npm install https://github.com/CodeFalling/hexo-asset-image --save\n\n　  之后使用hexo new命令时，source/_post/文件夹中会增加一个与博客同名的文件夹\n　  将使用到的图片放在这个文件夹中，并在引用图片时，按如下：\n　  \n> \\!\\[img\\](blogname/1.png)\n\n　  图片正常显示  \n　  \n　  可能遇到需要设置图片大小和居中的情况，此时需要使用html代码：  \n　  &lt; div align=center &gt; &lt; img src=\"./p/p.png\" /&gt; &lt;/div &gt;\n","source":"_posts/Github-Pages-hexo.md","raw":"---\ntitle: Github-Pages&hexo\ndate: 2018-06-10 18:18:24\ntags: 搭建博客\n---\n\n使用 *github-pages+ hexo* 搭建个人博客-Mac环境\n======================================\n<p align=\"right\">--搭建&主题更换&博客备份\n--------------------------------------\n\n## 1. 准备工作-github仓库\n　　首先到github的官网注册账号（...）。然后，新建仓库，在仓库Setting页面：\n　　![img](Github-Pages&hexo/1.png)\n　　<!-- more -->\n　　在setting页面下修改自己仓库的名字，注意格式要是 *yourusername* .github.io,比如我的就是minbud.github.io, 这样之后才能启用Pages并用 *yourusername* .github.io访问自己的博客，当然也可以绑定自己已有的域名\n　　![img](Github-Pages&hexo/2.png)\n　  找到Github Pages页面，选择publish，完成后就是这样：\n　  ![img](Github-Pages&hexo/3.png)\n\n## 2. 安装hexo\n　  由于hexo基于node.js，需要先从[官网](https://nodejs.org/)下载nodejs安装包。\n　  \n　  安装好后，用下面的命令可以查看版本（npm是nodejs的安装包管理器）\n> npm -v\n\n　  然后，使用npm命令安装hexo\n> sudo npm install -g hexo-cli 　  　  *-安装(-g表示全局安装)-*\n> sudo npm uninstall -g hexo-cli 　  　  *-卸载-*\n\n　  可以用hexo -v命令查看是否安装成功\n    \n　  新建一个文件夹，并在该文件夹下执行接下来的操作(以我的为例)\n> sudo mkdir ~/Documents/hexo\n> cd ~/Documents/hexo\n> hexo init　  　  -进行hexo的初始化工作，会在该文件夹下生成一系列必要文件-\n> npm install\n> npm install hexo-deployer-git -save        -安装部署工具-\n\n　  配置hexo，修改更目录下的_config.yml文件\n> \\#Site\n> title: MinBud的博客\n> subtitle: Walk Slow & Think Deep\n> description:\n> keywords:\n> author: Minbud\n> language:\n> timezone:\n\n　  最主要的是下面的配置项，在最末尾添加如下配置，可以设置部署时的push地址\n> deploy:\n>type: git\n>repo: http://github.com/minbud/minbud.github.io.git\n>branch: master\n\n　  博客文件使用markdown格式，放在./source/_post文件夹中，可以在终端新建博客文件\n> hexo new \"myFirstBlog\"\n\n　  编写完博客后，使用以下命令可以生成静态网页并部署到github中\n\n> hexo clean\n> hexo generate　  　  -生成博客网页的各种静态文件-\n> hexo server　  　  -在本地启动服务器，在浏览器访问http://localhost:4000/ 预览-\n> hexo deploy 　  -将博客网页推送到服务器-\n\n## 3. 更换主题\n　  经过上面步骤后可以得到一个拥有默认主题的hexo博客，另外还有许多第三方制作的精美的主题可以供我们使用，我用的是Litten的yilia\n　  \n> cd ~/Documents/hexo\n> git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n\n　  会在./themes目录下拷贝yilia主题，需要在_config.yml中修改主题名称从而应用主题\n　  另外需要对主题进行一定的修改，实现一定程度的定制，可以修改yilia文件夹下的_congfig.yml文件\n> favicon: img/favicon.png　  　  -修改头像-\n> avatar: img/minbud.png　  　  -修改网页标签栏图标-\n\n　  由于生成的网页文件在hexo文件夹根目录下，可以将图片放在hexo/img/路径下，并如上设置\n　  另外主题右下角有作者Litten的标签，有人可能不喜欢（比如我）,可以修改脚本文件将其去掉。index.html是生成的静态文件，直接修改只能生效一次或以后每次都得改。可以修改hexo/themes/yilia/layout/_partial/footer.ejs文件，将footer-right相关项删除就好了\n\n　  在首页不显示博客的全部内容，需要在文章中需要截断的地方加入\n> <\\!\\-\\- more \\-\\-\\>\n\n　  \n## 4. 备份博客\n　  在本地文件夹中存有你的各种博客文件（.md），但是部署到github上的时候实际上只是将生成的静态博客网页和各种使用到的资源文件push上去了，万一本地文件丢失了，靠github上的文件难以恢复原来的博客文件。\n　  可以在原仓库中创建分支，作为备份分支来解决这个问题\n　  \n　  在github网页上创建新分支，可以命名为hexo，在setting选项卡上找到branch，将默认分支设为hexo\n　  新建文件夹，将博客仓库clone到里面，并将之前文件夹中的_config.yml，themes/，source，scffolds/，package.json，复制进来\n　  将themes/yilia/.git/ 文件夹删除，否则无法push该文件夹\n　  执行\n> npm install\n> npm install hexo-deployer-git -save\n> git checkout hexo\n> git remote add origin https://github.com/minbud/minbud.github.io.git\n> git add .\n> git commit -m \"备份博客\"\n> git push origin hexo\n\n　  成功后，在github网页上切换到hexo分支，可以看到文件夹下的文件都被传上来了，以后需要备份的时候使用git命令就可以了\n　  \n## 5. 在博客中添加图片\n\n　  编辑_config.yml文件，确认 *post_asset_folder:true*\n　  在根目录下安装\n> npm install https://github.com/CodeFalling/hexo-asset-image --save\n\n　  之后使用hexo new命令时，source/_post/文件夹中会增加一个与博客同名的文件夹\n　  将使用到的图片放在这个文件夹中，并在引用图片时，按如下：\n　  \n> \\!\\[img\\](blogname/1.png)\n\n　  图片正常显示  \n　  \n　  可能遇到需要设置图片大小和居中的情况，此时需要使用html代码：  \n　  &lt; div align=center &gt; &lt; img src=\"./p/p.png\" /&gt; &lt;/div &gt;\n","slug":"Github-Pages-hexo","published":1,"updated":"2018-07-01T11:13:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjohyvhk0000hfzy80znpzva","content":"<h1 id=\"使用-github-pages-hexo-搭建个人博客-Mac环境\"><a href=\"#使用-github-pages-hexo-搭建个人博客-Mac环境\" class=\"headerlink\" title=\"使用 github-pages+ hexo 搭建个人博客-Mac环境\"></a>使用 <em>github-pages+ hexo</em> 搭建个人博客-Mac环境</h1><h2 id=\"–搭建-amp-主题更换-amp-博客备份\"><a href=\"#–搭建-amp-主题更换-amp-博客备份\" class=\"headerlink\" title=\"–搭建&amp;主题更换&amp;博客备份\"></a><p align=\"right\">–搭建&amp;主题更换&amp;博客备份</p></h2><h2 id=\"1-准备工作-github仓库\"><a href=\"#1-准备工作-github仓库\" class=\"headerlink\" title=\"1. 准备工作-github仓库\"></a>1. 准备工作-github仓库</h2><p>　　首先到github的官网注册账号（…）。然后，新建仓库，在仓库Setting页面：<br>　　<img src=\"/2018/06/10/Github-Pages-hexo/1.png\" alt=\"img\"><br>　　<a id=\"more\"></a><br>　　在setting页面下修改自己仓库的名字，注意格式要是 <em>yourusername</em> .github.io,比如我的就是minbud.github.io, 这样之后才能启用Pages并用 <em>yourusername</em> .github.io访问自己的博客，当然也可以绑定自己已有的域名<br>　　<img src=\"/2018/06/10/Github-Pages-hexo/2.png\" alt=\"img\"><br>　  找到Github Pages页面，选择publish，完成后就是这样：<br>　  <img src=\"/2018/06/10/Github-Pages-hexo/3.png\" alt=\"img\"></p>\n<h2 id=\"2-安装hexo\"><a href=\"#2-安装hexo\" class=\"headerlink\" title=\"2. 安装hexo\"></a>2. 安装hexo</h2><p>　  由于hexo基于node.js，需要先从<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">官网</a>下载nodejs安装包。<br>　<br>　  安装好后，用下面的命令可以查看版本（npm是nodejs的安装包管理器）</p>\n<blockquote>\n<p>npm -v</p>\n</blockquote>\n<p>　  然后，使用npm命令安装hexo</p>\n<blockquote>\n<p>sudo npm install -g hexo-cli 　  　  <em>-安装(-g表示全局安装)-</em><br>sudo npm uninstall -g hexo-cli 　  　  <em>-卸载-</em></p>\n</blockquote>\n<p>　  可以用hexo -v命令查看是否安装成功</p>\n<p>　  新建一个文件夹，并在该文件夹下执行接下来的操作(以我的为例)</p>\n<blockquote>\n<p>sudo mkdir ~/Documents/hexo<br>cd ~/Documents/hexo<br>hexo init　  　  -进行hexo的初始化工作，会在该文件夹下生成一系列必要文件-<br>npm install<br>npm install hexo-deployer-git -save        -安装部署工具-</p>\n</blockquote>\n<p>　  配置hexo，修改更目录下的_config.yml文件</p>\n<blockquote>\n<p>#Site<br>title: MinBud的博客<br>subtitle: Walk Slow &amp; Think Deep<br>description:<br>keywords:<br>author: Minbud<br>language:<br>timezone:</p>\n</blockquote>\n<p>　  最主要的是下面的配置项，在最末尾添加如下配置，可以设置部署时的push地址</p>\n<blockquote>\n<p>deploy:<br>type: git<br>repo: <a href=\"http://github.com/minbud/minbud.github.io.git\" target=\"_blank\" rel=\"noopener\">http://github.com/minbud/minbud.github.io.git</a><br>branch: master</p>\n</blockquote>\n<p>　  博客文件使用markdown格式，放在./source/_post文件夹中，可以在终端新建博客文件</p>\n<blockquote>\n<p>hexo new “myFirstBlog”</p>\n</blockquote>\n<p>　  编写完博客后，使用以下命令可以生成静态网页并部署到github中</p>\n<blockquote>\n<p>hexo clean<br>hexo generate　  　  -生成博客网页的各种静态文件-<br>hexo server　  　  -在本地启动服务器，在浏览器访问<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 预览-<br>hexo deploy 　  -将博客网页推送到服务器-</p>\n</blockquote>\n<h2 id=\"3-更换主题\"><a href=\"#3-更换主题\" class=\"headerlink\" title=\"3. 更换主题\"></a>3. 更换主题</h2><p>　  经过上面步骤后可以得到一个拥有默认主题的hexo博客，另外还有许多第三方制作的精美的主题可以供我们使用，我用的是Litten的yilia\n　  </p>\n<blockquote>\n<p>cd ~/Documents/hexo<br>git clone <a href=\"https://github.com/litten/hexo-theme-yilia.git\" target=\"_blank\" rel=\"noopener\">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia</p>\n</blockquote>\n<p>　  会在./themes目录下拷贝yilia主题，需要在_config.yml中修改主题名称从而应用主题<br>　  另外需要对主题进行一定的修改，实现一定程度的定制，可以修改yilia文件夹下的_congfig.yml文件</p>\n<blockquote>\n<p>favicon: img/favicon.png　  　  -修改头像-<br>avatar: img/minbud.png　  　  -修改网页标签栏图标-</p>\n</blockquote>\n<p>　  由于生成的网页文件在hexo文件夹根目录下，可以将图片放在hexo/img/路径下，并如上设置<br>　  另外主题右下角有作者Litten的标签，有人可能不喜欢（比如我）,可以修改脚本文件将其去掉。index.html是生成的静态文件，直接修改只能生效一次或以后每次都得改。可以修改hexo/themes/yilia/layout/_partial/footer.ejs文件，将footer-right相关项删除就好了</p>\n<p>　  在首页不显示博客的全部内容，需要在文章中需要截断的地方加入</p>\n<blockquote>\n<p>&lt;!-- more --></p>\n</blockquote>\n<p>　  </p>\n<h2 id=\"4-备份博客\"><a href=\"#4-备份博客\" class=\"headerlink\" title=\"4. 备份博客\"></a>4. 备份博客</h2><p>　  在本地文件夹中存有你的各种博客文件（.md），但是部署到github上的时候实际上只是将生成的静态博客网页和各种使用到的资源文件push上去了，万一本地文件丢失了，靠github上的文件难以恢复原来的博客文件。<br>　  可以在原仓库中创建分支，作为备份分支来解决这个问题<br>　<br>　  在github网页上创建新分支，可以命名为hexo，在setting选项卡上找到branch，将默认分支设为hexo<br>　  新建文件夹，将博客仓库clone到里面，并将之前文件夹中的_config.yml，themes/，source，scffolds/，package.json，复制进来<br>　  将themes/yilia/.git/ 文件夹删除，否则无法push该文件夹<br>　  执行</p>\n<blockquote>\n<p>npm install<br>npm install hexo-deployer-git -save<br>git checkout hexo<br>git remote add origin <a href=\"https://github.com/minbud/minbud.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/minbud/minbud.github.io.git</a><br>git add .<br>git commit -m “备份博客”<br>git push origin hexo</p>\n</blockquote>\n<p>　  成功后，在github网页上切换到hexo分支，可以看到文件夹下的文件都被传上来了，以后需要备份的时候使用git命令就可以了\n　  </p>\n<h2 id=\"5-在博客中添加图片\"><a href=\"#5-在博客中添加图片\" class=\"headerlink\" title=\"5. 在博客中添加图片\"></a>5. 在博客中添加图片</h2><p>　  编辑_config.yml文件，确认 <em>post_asset_folder:true</em><br>　  在根目录下安装</p>\n<blockquote>\n<p>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"noopener\">https://github.com/CodeFalling/hexo-asset-image</a> –save</p>\n</blockquote>\n<p>　  之后使用hexo new命令时，source/_post/文件夹中会增加一个与博客同名的文件夹<br>　  将使用到的图片放在这个文件夹中，并在引用图片时，按如下：\n　  </p>\n<blockquote>\n<p>![img](blogname/1.png)</p>\n</blockquote>\n<p>　  图片正常显示<br>　<br>　  可能遇到需要设置图片大小和居中的情况，此时需要使用html代码：<br>　  &lt; div align=center &gt; &lt; img src=”./p/p.png” /&gt; &lt;/div &gt;</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"使用-github-pages-hexo-搭建个人博客-Mac环境\"><a href=\"#使用-github-pages-hexo-搭建个人博客-Mac环境\" class=\"headerlink\" title=\"使用 github-pages+ hexo 搭建个人博客-Mac环境\"></a>使用 <em>github-pages+ hexo</em> 搭建个人博客-Mac环境</h1><h2 id=\"–搭建-amp-主题更换-amp-博客备份\"><a href=\"#–搭建-amp-主题更换-amp-博客备份\" class=\"headerlink\" title=\"–搭建&amp;主题更换&amp;博客备份\"></a><p align=\"right\">–搭建&amp;主题更换&amp;博客备份</p></h2><h2 id=\"1-准备工作-github仓库\"><a href=\"#1-准备工作-github仓库\" class=\"headerlink\" title=\"1. 准备工作-github仓库\"></a>1. 准备工作-github仓库</h2><p>　　首先到github的官网注册账号（…）。然后，新建仓库，在仓库Setting页面：<br>　　<img src=\"/2018/06/10/Github-Pages-hexo/1.png\" alt=\"img\"><br></p>","more":"<br>　　在setting页面下修改自己仓库的名字，注意格式要是 <em>yourusername</em> .github.io,比如我的就是minbud.github.io, 这样之后才能启用Pages并用 <em>yourusername</em> .github.io访问自己的博客，当然也可以绑定自己已有的域名<br>　　<img src=\"/2018/06/10/Github-Pages-hexo/2.png\" alt=\"img\"><br>　  找到Github Pages页面，选择publish，完成后就是这样：<br>　  <img src=\"/2018/06/10/Github-Pages-hexo/3.png\" alt=\"img\"><p></p>\n<h2 id=\"2-安装hexo\"><a href=\"#2-安装hexo\" class=\"headerlink\" title=\"2. 安装hexo\"></a>2. 安装hexo</h2><p>　  由于hexo基于node.js，需要先从<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">官网</a>下载nodejs安装包。<br>　<br>　  安装好后，用下面的命令可以查看版本（npm是nodejs的安装包管理器）</p>\n<blockquote>\n<p>npm -v</p>\n</blockquote>\n<p>　  然后，使用npm命令安装hexo</p>\n<blockquote>\n<p>sudo npm install -g hexo-cli 　  　  <em>-安装(-g表示全局安装)-</em><br>sudo npm uninstall -g hexo-cli 　  　  <em>-卸载-</em></p>\n</blockquote>\n<p>　  可以用hexo -v命令查看是否安装成功</p>\n<p>　  新建一个文件夹，并在该文件夹下执行接下来的操作(以我的为例)</p>\n<blockquote>\n<p>sudo mkdir ~/Documents/hexo<br>cd ~/Documents/hexo<br>hexo init　  　  -进行hexo的初始化工作，会在该文件夹下生成一系列必要文件-<br>npm install<br>npm install hexo-deployer-git -save        -安装部署工具-</p>\n</blockquote>\n<p>　  配置hexo，修改更目录下的_config.yml文件</p>\n<blockquote>\n<p>#Site<br>title: MinBud的博客<br>subtitle: Walk Slow &amp; Think Deep<br>description:<br>keywords:<br>author: Minbud<br>language:<br>timezone:</p>\n</blockquote>\n<p>　  最主要的是下面的配置项，在最末尾添加如下配置，可以设置部署时的push地址</p>\n<blockquote>\n<p>deploy:<br>type: git<br>repo: <a href=\"http://github.com/minbud/minbud.github.io.git\" target=\"_blank\" rel=\"noopener\">http://github.com/minbud/minbud.github.io.git</a><br>branch: master</p>\n</blockquote>\n<p>　  博客文件使用markdown格式，放在./source/_post文件夹中，可以在终端新建博客文件</p>\n<blockquote>\n<p>hexo new “myFirstBlog”</p>\n</blockquote>\n<p>　  编写完博客后，使用以下命令可以生成静态网页并部署到github中</p>\n<blockquote>\n<p>hexo clean<br>hexo generate　  　  -生成博客网页的各种静态文件-<br>hexo server　  　  -在本地启动服务器，在浏览器访问<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 预览-<br>hexo deploy 　  -将博客网页推送到服务器-</p>\n</blockquote>\n<h2 id=\"3-更换主题\"><a href=\"#3-更换主题\" class=\"headerlink\" title=\"3. 更换主题\"></a>3. 更换主题</h2><p>　  经过上面步骤后可以得到一个拥有默认主题的hexo博客，另外还有许多第三方制作的精美的主题可以供我们使用，我用的是Litten的yilia\n　  </p>\n<blockquote>\n<p>cd ~/Documents/hexo<br>git clone <a href=\"https://github.com/litten/hexo-theme-yilia.git\" target=\"_blank\" rel=\"noopener\">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia</p>\n</blockquote>\n<p>　  会在./themes目录下拷贝yilia主题，需要在_config.yml中修改主题名称从而应用主题<br>　  另外需要对主题进行一定的修改，实现一定程度的定制，可以修改yilia文件夹下的_congfig.yml文件</p>\n<blockquote>\n<p>favicon: img/favicon.png　  　  -修改头像-<br>avatar: img/minbud.png　  　  -修改网页标签栏图标-</p>\n</blockquote>\n<p>　  由于生成的网页文件在hexo文件夹根目录下，可以将图片放在hexo/img/路径下，并如上设置<br>　  另外主题右下角有作者Litten的标签，有人可能不喜欢（比如我）,可以修改脚本文件将其去掉。index.html是生成的静态文件，直接修改只能生效一次或以后每次都得改。可以修改hexo/themes/yilia/layout/_partial/footer.ejs文件，将footer-right相关项删除就好了</p>\n<p>　  在首页不显示博客的全部内容，需要在文章中需要截断的地方加入</p>\n<blockquote>\n<p>&lt;!-- more --></p>\n</blockquote>\n<p>　  </p>\n<h2 id=\"4-备份博客\"><a href=\"#4-备份博客\" class=\"headerlink\" title=\"4. 备份博客\"></a>4. 备份博客</h2><p>　  在本地文件夹中存有你的各种博客文件（.md），但是部署到github上的时候实际上只是将生成的静态博客网页和各种使用到的资源文件push上去了，万一本地文件丢失了，靠github上的文件难以恢复原来的博客文件。<br>　  可以在原仓库中创建分支，作为备份分支来解决这个问题<br>　<br>　  在github网页上创建新分支，可以命名为hexo，在setting选项卡上找到branch，将默认分支设为hexo<br>　  新建文件夹，将博客仓库clone到里面，并将之前文件夹中的_config.yml，themes/，source，scffolds/，package.json，复制进来<br>　  将themes/yilia/.git/ 文件夹删除，否则无法push该文件夹<br>　  执行</p>\n<blockquote>\n<p>npm install<br>npm install hexo-deployer-git -save<br>git checkout hexo<br>git remote add origin <a href=\"https://github.com/minbud/minbud.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/minbud/minbud.github.io.git</a><br>git add .<br>git commit -m “备份博客”<br>git push origin hexo</p>\n</blockquote>\n<p>　  成功后，在github网页上切换到hexo分支，可以看到文件夹下的文件都被传上来了，以后需要备份的时候使用git命令就可以了\n　  </p>\n<h2 id=\"5-在博客中添加图片\"><a href=\"#5-在博客中添加图片\" class=\"headerlink\" title=\"5. 在博客中添加图片\"></a>5. 在博客中添加图片</h2><p>　  编辑_config.yml文件，确认 <em>post_asset_folder:true</em><br>　  在根目录下安装</p>\n<blockquote>\n<p>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"noopener\">https://github.com/CodeFalling/hexo-asset-image</a> –save</p>\n</blockquote>\n<p>　  之后使用hexo new命令时，source/_post/文件夹中会增加一个与博客同名的文件夹<br>　  将使用到的图片放在这个文件夹中，并在引用图片时，按如下：\n　  </p>\n<blockquote>\n<p>![img](blogname/1.png)</p>\n</blockquote>\n<p>　  图片正常显示<br>　<br>　  可能遇到需要设置图片大小和居中的情况，此时需要使用html代码：<br>　  &lt; div align=center &gt; &lt; img src=”./p/p.png” /&gt; &lt;/div &gt;</p>"},{"title":"New to C6678 & CSS","date":"2018-07-01T10:35:02.000Z","_content":"\n## 1. C6678开发板上手\n\n　　等了一个多月，开发板终于到了。板子型号是TMDSEVM6678LE，带有XDS560v2仿真板(Blackhawk XDS560v2-USB Mezzanine Emulator）。  \n　　刚来的板子上已经烧写了一个Out-of-Box(OOB)例程--[HUA（High-Performance DSP Utility Application）](http://processors.wiki.ti.com/index.php/MCSDK_HUA_Demonstration_Guide)。按照默认的启动设置（SW3~SW6、SW9），即0010-1111-1110-0000，SW9：11。SW9的第二个开关是设置HUA例程是使用静态IP还是DHCP方式工作。  \n　　由于刚拿到板子，不了解情况，我直接在板子上烧写了其它的程序。自带的HUA工程文件可以在MCSDK安装目录的demo目录中找到。  \n　　下面介绍一下让HUA例程跑起来的过程（我使用的是静态IP方式，DHCP方式还需要下载配置DHCP Server）。  \n　　前置准备：   \n<!--more-->\n> 1. windows: [hyperterminal](https://www.hilgraeve.com/hyperterminal-trial/)　　　　linux: minicom   　　*用于接收从串口发出的数据*  \n> 安装完运行，PC连接上开发板，新建连接可以看到有COM4选项，设置如下：  \n> <div align=center> <img src=\"./New-to-C6678-CSS/hua_com4_config.png\" width=\"300\" height=\"400\" /></div>  \n> tips:  \n> TMDSEVM6678LE带有XDS560v2仿真板，这个扩展板的USB-mini口没有和UART口连接，因此不能通过该口接收串口数据。需要自己将这个口（RS-232）连接到PC，或者将560v2拆下，使用板子自带的XDS100v1，自带的仿真器虽然速度慢一些，但是串口是连到USB-mini口的。  \n>   \n> 2. 同时需要设置PC的ip信息：  \n> <div align=center><img src=\"./New-to-C6678-CSS/hua_ipconfig.png\" width=\"300\" height=\"400\" /></div>\n  \n　　正式运行：  \n　　准备工作完成后，按下板子的FULL_REST开关（靠近网口那个）,可以看到Hyperterminal输出如下：  \n　　![img](New-to-C6678-CSS/hua_com4.png)  \n　　在浏览器中输入192.168.2.100：  \n　　![img](New-to-C6678-CSS/hua_html_index.png)  \n\n## 2. CCS 安装&使用\n\n　　附带在评估板中的还有一个光盘，光盘中有CCSv5和BIOS_MCSK的安装包。但是CCSv5已经比较老了，许多工程文件都是使用比较新的编译器编译的，因此我在官网下了[CCSv8](http://processors.wiki.ti.com/index.php/Download_CCS#Download_the_latest_CCS)，同时也下了[bios_mcsdk_02_01_02_06](http://software-dl.ti.com/sdoemb/sdoemb_public_sw/bios_mcsdk/latest/index_FDS.html)。  \n　　CCS中有几个使用较为频繁的操作：  \n1. project > import project  \n　　将已有的工程文件导入，导入后可以在 *view > project explorer*操作打开的窗口中看到导入的工程。  \n2.  view > target configurations  \n　　打开目标连接文件窗口，可以看到各个工程文件中的连接文件。在窗口中的ccxml文件中右击鼠标，选择lauch selected configutaion可以用改配置文件连接并启动目标板。启动前最好先双击该文件，在打开的窗口中test configuration看看有无错误。  \n3. 下载并执行程序流程：  \n　　1) Debug窗口中右击某个core,conect target  \n　　2) tool > gel files 。 memory map窗口中，gel files > 右击 >load gel。　　*gel文件是初始化脚本*  \n　　3) scripts > evmc6678l init function > global_default_setup  \n　　4) run > load > load program > 选择.out文件  \n　　5) run > resume 程序开始运行。  \n4. 安装新的组件:  \n　　window > preference >Code Compose Studio > products > rediscover > install  \n　　window > preference >Code Compose Studio > build > compliers > refresh > install\n","source":"_posts/New-to-C6678-CSS.md","raw":"---\ntitle: New to C6678 & CSS\ndate: 2018-07-01 18:35:02\ntags: evmc6678l\n---\n\n## 1. C6678开发板上手\n\n　　等了一个多月，开发板终于到了。板子型号是TMDSEVM6678LE，带有XDS560v2仿真板(Blackhawk XDS560v2-USB Mezzanine Emulator）。  \n　　刚来的板子上已经烧写了一个Out-of-Box(OOB)例程--[HUA（High-Performance DSP Utility Application）](http://processors.wiki.ti.com/index.php/MCSDK_HUA_Demonstration_Guide)。按照默认的启动设置（SW3~SW6、SW9），即0010-1111-1110-0000，SW9：11。SW9的第二个开关是设置HUA例程是使用静态IP还是DHCP方式工作。  \n　　由于刚拿到板子，不了解情况，我直接在板子上烧写了其它的程序。自带的HUA工程文件可以在MCSDK安装目录的demo目录中找到。  \n　　下面介绍一下让HUA例程跑起来的过程（我使用的是静态IP方式，DHCP方式还需要下载配置DHCP Server）。  \n　　前置准备：   \n<!--more-->\n> 1. windows: [hyperterminal](https://www.hilgraeve.com/hyperterminal-trial/)　　　　linux: minicom   　　*用于接收从串口发出的数据*  \n> 安装完运行，PC连接上开发板，新建连接可以看到有COM4选项，设置如下：  \n> <div align=center> <img src=\"./New-to-C6678-CSS/hua_com4_config.png\" width=\"300\" height=\"400\" /></div>  \n> tips:  \n> TMDSEVM6678LE带有XDS560v2仿真板，这个扩展板的USB-mini口没有和UART口连接，因此不能通过该口接收串口数据。需要自己将这个口（RS-232）连接到PC，或者将560v2拆下，使用板子自带的XDS100v1，自带的仿真器虽然速度慢一些，但是串口是连到USB-mini口的。  \n>   \n> 2. 同时需要设置PC的ip信息：  \n> <div align=center><img src=\"./New-to-C6678-CSS/hua_ipconfig.png\" width=\"300\" height=\"400\" /></div>\n  \n　　正式运行：  \n　　准备工作完成后，按下板子的FULL_REST开关（靠近网口那个）,可以看到Hyperterminal输出如下：  \n　　![img](New-to-C6678-CSS/hua_com4.png)  \n　　在浏览器中输入192.168.2.100：  \n　　![img](New-to-C6678-CSS/hua_html_index.png)  \n\n## 2. CCS 安装&使用\n\n　　附带在评估板中的还有一个光盘，光盘中有CCSv5和BIOS_MCSK的安装包。但是CCSv5已经比较老了，许多工程文件都是使用比较新的编译器编译的，因此我在官网下了[CCSv8](http://processors.wiki.ti.com/index.php/Download_CCS#Download_the_latest_CCS)，同时也下了[bios_mcsdk_02_01_02_06](http://software-dl.ti.com/sdoemb/sdoemb_public_sw/bios_mcsdk/latest/index_FDS.html)。  \n　　CCS中有几个使用较为频繁的操作：  \n1. project > import project  \n　　将已有的工程文件导入，导入后可以在 *view > project explorer*操作打开的窗口中看到导入的工程。  \n2.  view > target configurations  \n　　打开目标连接文件窗口，可以看到各个工程文件中的连接文件。在窗口中的ccxml文件中右击鼠标，选择lauch selected configutaion可以用改配置文件连接并启动目标板。启动前最好先双击该文件，在打开的窗口中test configuration看看有无错误。  \n3. 下载并执行程序流程：  \n　　1) Debug窗口中右击某个core,conect target  \n　　2) tool > gel files 。 memory map窗口中，gel files > 右击 >load gel。　　*gel文件是初始化脚本*  \n　　3) scripts > evmc6678l init function > global_default_setup  \n　　4) run > load > load program > 选择.out文件  \n　　5) run > resume 程序开始运行。  \n4. 安装新的组件:  \n　　window > preference >Code Compose Studio > products > rediscover > install  \n　　window > preference >Code Compose Studio > build > compliers > refresh > install\n","slug":"New-to-C6678-CSS","published":1,"updated":"2018-07-03T15:53:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjohyvhn0001hfzyoi35105m","content":"<h2 id=\"1-C6678开发板上手\"><a href=\"#1-C6678开发板上手\" class=\"headerlink\" title=\"1. C6678开发板上手\"></a>1. C6678开发板上手</h2><p>　　等了一个多月，开发板终于到了。板子型号是TMDSEVM6678LE，带有XDS560v2仿真板(Blackhawk XDS560v2-USB Mezzanine Emulator）。<br>　　刚来的板子上已经烧写了一个Out-of-Box(OOB)例程–<a href=\"http://processors.wiki.ti.com/index.php/MCSDK_HUA_Demonstration_Guide\" target=\"_blank\" rel=\"noopener\">HUA（High-Performance DSP Utility Application）</a>。按照默认的启动设置（SW3~SW6、SW9），即0010-1111-1110-0000，SW9：11。SW9的第二个开关是设置HUA例程是使用静态IP还是DHCP方式工作。<br>　　由于刚拿到板子，不了解情况，我直接在板子上烧写了其它的程序。自带的HUA工程文件可以在MCSDK安装目录的demo目录中找到。<br>　　下面介绍一下让HUA例程跑起来的过程（我使用的是静态IP方式，DHCP方式还需要下载配置DHCP Server）。<br>　　前置准备：<br><a id=\"more\"></a></p>\n<blockquote>\n<ol>\n<li><p>windows: <a href=\"https://www.hilgraeve.com/hyperterminal-trial/\" target=\"_blank\" rel=\"noopener\">hyperterminal</a>　　　　linux: minicom   　　<em>用于接收从串口发出的数据</em><br>安装完运行，PC连接上开发板，新建连接可以看到有COM4选项，设置如下：<br><div align=\"center\"> <img src=\"/2018/07/01/New-to-C6678-CSS/hua_com4_config.png\" width=\"300\" height=\"400\"></div><br>tips:<br>TMDSEVM6678LE带有XDS560v2仿真板，这个扩展板的USB-mini口没有和UART口连接，因此不能通过该口接收串口数据。需要自己将这个口（RS-232）连接到PC，或者将560v2拆下，使用板子自带的XDS100v1，自带的仿真器虽然速度慢一些，但是串口是连到USB-mini口的。  </p>\n</li>\n<li><p>同时需要设置PC的ip信息：  </p>\n<div align=\"center\"><img src=\"/2018/07/01/New-to-C6678-CSS/hua_ipconfig.png\" width=\"300\" height=\"400\"></div>\n</li>\n</ol>\n</blockquote>\n<p>　　正式运行：<br>　　准备工作完成后，按下板子的FULL_REST开关（靠近网口那个）,可以看到Hyperterminal输出如下：<br>　　<img src=\"/2018/07/01/New-to-C6678-CSS/hua_com4.png\" alt=\"img\"><br>　　在浏览器中输入192.168.2.100：<br>　　<img src=\"/2018/07/01/New-to-C6678-CSS/hua_html_index.png\" alt=\"img\">  </p>\n<h2 id=\"2-CCS-安装-amp-使用\"><a href=\"#2-CCS-安装-amp-使用\" class=\"headerlink\" title=\"2. CCS 安装&amp;使用\"></a>2. CCS 安装&amp;使用</h2><p>　　附带在评估板中的还有一个光盘，光盘中有CCSv5和BIOS_MCSK的安装包。但是CCSv5已经比较老了，许多工程文件都是使用比较新的编译器编译的，因此我在官网下了<a href=\"http://processors.wiki.ti.com/index.php/Download_CCS#Download_the_latest_CCS\" target=\"_blank\" rel=\"noopener\">CCSv8</a>，同时也下了<a href=\"http://software-dl.ti.com/sdoemb/sdoemb_public_sw/bios_mcsdk/latest/index_FDS.html\" target=\"_blank\" rel=\"noopener\">bios_mcsdk_02_01_02_06</a>。<br>　　CCS中有几个使用较为频繁的操作：  </p>\n<ol>\n<li>project &gt; import project<br>　　将已有的工程文件导入，导入后可以在 <em>view &gt; project explorer</em>操作打开的窗口中看到导入的工程。  </li>\n<li>view &gt; target configurations<br>　　打开目标连接文件窗口，可以看到各个工程文件中的连接文件。在窗口中的ccxml文件中右击鼠标，选择lauch selected configutaion可以用改配置文件连接并启动目标板。启动前最好先双击该文件，在打开的窗口中test configuration看看有无错误。  </li>\n<li>下载并执行程序流程：<br>　　1) Debug窗口中右击某个core,conect target<br>　　2) tool &gt; gel files 。 memory map窗口中，gel files &gt; 右击 &gt;load gel。　　<em>gel文件是初始化脚本</em><br>　　3) scripts &gt; evmc6678l init function &gt; global_default_setup<br>　　4) run &gt; load &gt; load program &gt; 选择.out文件<br>　　5) run &gt; resume 程序开始运行。  </li>\n<li>安装新的组件:<br>　　window &gt; preference &gt;Code Compose Studio &gt; products &gt; rediscover &gt; install<br>　　window &gt; preference &gt;Code Compose Studio &gt; build &gt; compliers &gt; refresh &gt; install</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-C6678开发板上手\"><a href=\"#1-C6678开发板上手\" class=\"headerlink\" title=\"1. C6678开发板上手\"></a>1. C6678开发板上手</h2><p>　　等了一个多月，开发板终于到了。板子型号是TMDSEVM6678LE，带有XDS560v2仿真板(Blackhawk XDS560v2-USB Mezzanine Emulator）。<br>　　刚来的板子上已经烧写了一个Out-of-Box(OOB)例程–<a href=\"http://processors.wiki.ti.com/index.php/MCSDK_HUA_Demonstration_Guide\" target=\"_blank\" rel=\"noopener\">HUA（High-Performance DSP Utility Application）</a>。按照默认的启动设置（SW3~SW6、SW9），即0010-1111-1110-0000，SW9：11。SW9的第二个开关是设置HUA例程是使用静态IP还是DHCP方式工作。<br>　　由于刚拿到板子，不了解情况，我直接在板子上烧写了其它的程序。自带的HUA工程文件可以在MCSDK安装目录的demo目录中找到。<br>　　下面介绍一下让HUA例程跑起来的过程（我使用的是静态IP方式，DHCP方式还需要下载配置DHCP Server）。<br>　　前置准备：<br></p>","more":"<p></p>\n<blockquote>\n<ol>\n<li><p>windows: <a href=\"https://www.hilgraeve.com/hyperterminal-trial/\" target=\"_blank\" rel=\"noopener\">hyperterminal</a>　　　　linux: minicom   　　<em>用于接收从串口发出的数据</em><br>安装完运行，PC连接上开发板，新建连接可以看到有COM4选项，设置如下：<br><div align=\"center\"> <img src=\"/2018/07/01/New-to-C6678-CSS/hua_com4_config.png\" width=\"300\" height=\"400\"></div><br>tips:<br>TMDSEVM6678LE带有XDS560v2仿真板，这个扩展板的USB-mini口没有和UART口连接，因此不能通过该口接收串口数据。需要自己将这个口（RS-232）连接到PC，或者将560v2拆下，使用板子自带的XDS100v1，自带的仿真器虽然速度慢一些，但是串口是连到USB-mini口的。  </p>\n</li>\n<li><p>同时需要设置PC的ip信息：  </p>\n<div align=\"center\"><img src=\"/2018/07/01/New-to-C6678-CSS/hua_ipconfig.png\" width=\"300\" height=\"400\"></div>\n</li>\n</ol>\n</blockquote>\n<p>　　正式运行：<br>　　准备工作完成后，按下板子的FULL_REST开关（靠近网口那个）,可以看到Hyperterminal输出如下：<br>　　<img src=\"/2018/07/01/New-to-C6678-CSS/hua_com4.png\" alt=\"img\"><br>　　在浏览器中输入192.168.2.100：<br>　　<img src=\"/2018/07/01/New-to-C6678-CSS/hua_html_index.png\" alt=\"img\">  </p>\n<h2 id=\"2-CCS-安装-amp-使用\"><a href=\"#2-CCS-安装-amp-使用\" class=\"headerlink\" title=\"2. CCS 安装&amp;使用\"></a>2. CCS 安装&amp;使用</h2><p>　　附带在评估板中的还有一个光盘，光盘中有CCSv5和BIOS_MCSK的安装包。但是CCSv5已经比较老了，许多工程文件都是使用比较新的编译器编译的，因此我在官网下了<a href=\"http://processors.wiki.ti.com/index.php/Download_CCS#Download_the_latest_CCS\" target=\"_blank\" rel=\"noopener\">CCSv8</a>，同时也下了<a href=\"http://software-dl.ti.com/sdoemb/sdoemb_public_sw/bios_mcsdk/latest/index_FDS.html\" target=\"_blank\" rel=\"noopener\">bios_mcsdk_02_01_02_06</a>。<br>　　CCS中有几个使用较为频繁的操作：  </p>\n<ol>\n<li>project &gt; import project<br>　　将已有的工程文件导入，导入后可以在 <em>view &gt; project explorer</em>操作打开的窗口中看到导入的工程。  </li>\n<li>view &gt; target configurations<br>　　打开目标连接文件窗口，可以看到各个工程文件中的连接文件。在窗口中的ccxml文件中右击鼠标，选择lauch selected configutaion可以用改配置文件连接并启动目标板。启动前最好先双击该文件，在打开的窗口中test configuration看看有无错误。  </li>\n<li>下载并执行程序流程：<br>　　1) Debug窗口中右击某个core,conect target<br>　　2) tool &gt; gel files 。 memory map窗口中，gel files &gt; 右击 &gt;load gel。　　<em>gel文件是初始化脚本</em><br>　　3) scripts &gt; evmc6678l init function &gt; global_default_setup<br>　　4) run &gt; load &gt; load program &gt; 选择.out文件<br>　　5) run &gt; resume 程序开始运行。  </li>\n<li>安装新的组件:<br>　　window &gt; preference &gt;Code Compose Studio &gt; products &gt; rediscover &gt; install<br>　　window &gt; preference &gt;Code Compose Studio &gt; build &gt; compliers &gt; refresh &gt; install</li>\n</ol>"},{"title":"routerap","date":"2018-07-02T16:12:39.000Z","_content":"\n## 路由器WAN LAN口 &AP模式\n　　实验室的无线网总是间歇性的断，有些让人心烦。今天罢工了好长一段时间，于是我和同学折腾了一下。之前没怎么设置过路由器，都不怎么了解。才发现自己连路由器的LAN、WAN口的作用都不知道，汗~_~!。\n\n<!--more-->\n\n　　WAN口用于连接外网，LAN口用于连接内网。运营商来过来的网线连接到WAN口，自己的设备则连接到LAN口。这是通常的路由器模式。  \n　　有时会有一些特殊的需求，比如场地比较大，要实现wifi的覆盖，需要有多个无线路由器。这时候这些用来扩展的路由器需要使用AP模式，即作为无线交换机。  \n\n#### 重点\n　　然后就是此文的重点了。设置无线交换机，需要将从主路由器LAN口那里接过来的网线连到作为无线交换机的路由器的LAN口，然后对路由器进行一些设置。  \n　　设置的时候先不要连接主路由器的网线，同时将次级路由器的LAN口和电脑用网线相连，在浏览器中访问路由器的设置页面，关闭路由器的DHCP功能。原因是由于主路由器已经有了DHCP功能，如果次路由器也开启的话，会造成IP分配的冲突，使得路由器出现问题，并造成间歇性断网的现象！！！  \n　　OK,设置好的路由器就很稳定了^_^。\n","source":"_posts/routerap.md","raw":"---\ntitle: routerap\ndate: 2018-07-03 00:12:39\ntags: 计算机网络\n---\n\n## 路由器WAN LAN口 &AP模式\n　　实验室的无线网总是间歇性的断，有些让人心烦。今天罢工了好长一段时间，于是我和同学折腾了一下。之前没怎么设置过路由器，都不怎么了解。才发现自己连路由器的LAN、WAN口的作用都不知道，汗~_~!。\n\n<!--more-->\n\n　　WAN口用于连接外网，LAN口用于连接内网。运营商来过来的网线连接到WAN口，自己的设备则连接到LAN口。这是通常的路由器模式。  \n　　有时会有一些特殊的需求，比如场地比较大，要实现wifi的覆盖，需要有多个无线路由器。这时候这些用来扩展的路由器需要使用AP模式，即作为无线交换机。  \n\n#### 重点\n　　然后就是此文的重点了。设置无线交换机，需要将从主路由器LAN口那里接过来的网线连到作为无线交换机的路由器的LAN口，然后对路由器进行一些设置。  \n　　设置的时候先不要连接主路由器的网线，同时将次级路由器的LAN口和电脑用网线相连，在浏览器中访问路由器的设置页面，关闭路由器的DHCP功能。原因是由于主路由器已经有了DHCP功能，如果次路由器也开启的话，会造成IP分配的冲突，使得路由器出现问题，并造成间歇性断网的现象！！！  \n　　OK,设置好的路由器就很稳定了^_^。\n","slug":"routerap","published":1,"updated":"2018-07-08T16:26:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjohyvhr0003hfzy2gwu1e9f","content":"<h2 id=\"路由器WAN-LAN口-amp-AP模式\"><a href=\"#路由器WAN-LAN口-amp-AP模式\" class=\"headerlink\" title=\"路由器WAN LAN口 &amp;AP模式\"></a>路由器WAN LAN口 &amp;AP模式</h2><p>　　实验室的无线网总是间歇性的断，有些让人心烦。今天罢工了好长一段时间，于是我和同学折腾了一下。之前没怎么设置过路由器，都不怎么了解。才发现自己连路由器的LAN、WAN口的作用都不知道，汗~_~!。</p>\n<a id=\"more\"></a>\n<p>　　WAN口用于连接外网，LAN口用于连接内网。运营商来过来的网线连接到WAN口，自己的设备则连接到LAN口。这是通常的路由器模式。<br>　　有时会有一些特殊的需求，比如场地比较大，要实现wifi的覆盖，需要有多个无线路由器。这时候这些用来扩展的路由器需要使用AP模式，即作为无线交换机。  </p>\n<h4 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h4><p>　　然后就是此文的重点了。设置无线交换机，需要将从主路由器LAN口那里接过来的网线连到作为无线交换机的路由器的LAN口，然后对路由器进行一些设置。<br>　　设置的时候先不要连接主路由器的网线，同时将次级路由器的LAN口和电脑用网线相连，在浏览器中访问路由器的设置页面，关闭路由器的DHCP功能。原因是由于主路由器已经有了DHCP功能，如果次路由器也开启的话，会造成IP分配的冲突，使得路由器出现问题，并造成间歇性断网的现象！！！<br>　　OK,设置好的路由器就很稳定了^_^。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"路由器WAN-LAN口-amp-AP模式\"><a href=\"#路由器WAN-LAN口-amp-AP模式\" class=\"headerlink\" title=\"路由器WAN LAN口 &amp;AP模式\"></a>路由器WAN LAN口 &amp;AP模式</h2><p>　　实验室的无线网总是间歇性的断，有些让人心烦。今天罢工了好长一段时间，于是我和同学折腾了一下。之前没怎么设置过路由器，都不怎么了解。才发现自己连路由器的LAN、WAN口的作用都不知道，汗~_~!。</p>","more":"<p>　　WAN口用于连接外网，LAN口用于连接内网。运营商来过来的网线连接到WAN口，自己的设备则连接到LAN口。这是通常的路由器模式。<br>　　有时会有一些特殊的需求，比如场地比较大，要实现wifi的覆盖，需要有多个无线路由器。这时候这些用来扩展的路由器需要使用AP模式，即作为无线交换机。  </p>\n<h4 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h4><p>　　然后就是此文的重点了。设置无线交换机，需要将从主路由器LAN口那里接过来的网线连到作为无线交换机的路由器的LAN口，然后对路由器进行一些设置。<br>　　设置的时候先不要连接主路由器的网线，同时将次级路由器的LAN口和电脑用网线相连，在浏览器中访问路由器的设置页面，关闭路由器的DHCP功能。原因是由于主路由器已经有了DHCP功能，如果次路由器也开启的话，会造成IP分配的冲突，使得路由器出现问题，并造成间歇性断网的现象！！！<br>　　OK,设置好的路由器就很稳定了^_^。</p>"},{"title":"ethernet","date":"2018-06-23T12:56:39.000Z","_content":"\n## 1. 以太网最小帧长\n　　以太网中的最小帧长为64字节（包括以太网帧的前后部分：14+4字节）。亦即数据段为46字节。  \n　　64字节的计算过程涉及以太网的载波监听冲突检测机制。基本原理是一个发送端需要在发送完数据前能够监听到在此信道上在它之前已经开始发送数据的发送冲突。在最极端的情况下，两个发送端距离最远，第一个发送端A在开始发送数据后，数据在经过t时间后会到达发送端B，在到达之前B监听不到数据因此也开始发送数据，B开始发送后随机监听到A的数据，因此发出阻塞信号。经过时间t后阻塞信号到达A，要求此时A数据还没有发送完毕，才能检测到数据发送出错。也就是发送数据的时间要大于2t。  \n　　标准规定，10Mbps以太网采用中继器时，连接最大长度为2500米，最多经过4个中继器，信号在介质中传输速度小于光速c，一般范围为0.6~0.8c，取0.7c，则最大传输时延为（2500*4）/0.7c,因此规定对于10Mbps以太网规定一帧的最小发送时间必须为51.2μs。\n　　51.2 μs为512bit即64字节数据在10Mbps以太网下的发送时间。  \n\n<!--more-->\n　　\n## 2. MAC地址 & IP地址\n　　MAC地址和IP地址都可以用来标识主机，为什么不只用其中的一个？  \n### 1. 如果只用IP地址\n　　如果不用mac地址，所有设备都只有IP地址，那么有两种情况：IP地址是出厂分配的；IP地址是由路由器动态分配的；  \n　　第一种情况下，IP地址会不够用；另外，由于是出厂分配的，那么设备在接入不同的网络时，便无法利用IP地址的网络号、子网号等来进行路由，会导致路由表需要不断的更新，且路由表会很大。  \n　　第二种情况下，在设备还没有分配到IP地址前，由于设备没有标识，便无法与路由器通信，进而也不可能被分配到IP地址。\n### 2. 如果只用MAC地址\n　　设备只有MAC地址，也会遇到只用IP地址时所遇到的情况，分析过程一样。\n### 3. 其他\n　　数据包中的IP地址是终点地址，而mac地址则是下一跳地址，经过路由器时IP地址不会改变而mac则会变化。\n　　\n## 3. 集线器（hub） & 交换机（网桥） & 路由器\n　　集线器工作在物理层，交换机工作在数据链路层，路由器工作在网络层。  \n　　集线器的数据传输方式是广播，只对物理信号进行放大中继，所有端口属于一个冲突域；而交换机则基于MAC地址，能够完成数据包到合适端口的转发，每个端口是一个独立的冲突域。路由器转发基于IP地址，能够隔绝广播域。  \n　　集线器所有端口共享集线器的总带宽；交换机每个端口都有自己的带宽，因而多个端口队之间可以同时传输数据。  \n　　交换机具有全双工的工作模式，也就是可以同时发送和接受数据，而集线器只有半双工模式。  \n　　交换机用于组建局域网，路由器将组好的局域网连接起来。 \n","source":"_posts/ethernet.md","raw":"---\ntitle: ethernet\ndate: 2018-06-23 20:56:39\ntags: 计算机网络\n---\n\n## 1. 以太网最小帧长\n　　以太网中的最小帧长为64字节（包括以太网帧的前后部分：14+4字节）。亦即数据段为46字节。  \n　　64字节的计算过程涉及以太网的载波监听冲突检测机制。基本原理是一个发送端需要在发送完数据前能够监听到在此信道上在它之前已经开始发送数据的发送冲突。在最极端的情况下，两个发送端距离最远，第一个发送端A在开始发送数据后，数据在经过t时间后会到达发送端B，在到达之前B监听不到数据因此也开始发送数据，B开始发送后随机监听到A的数据，因此发出阻塞信号。经过时间t后阻塞信号到达A，要求此时A数据还没有发送完毕，才能检测到数据发送出错。也就是发送数据的时间要大于2t。  \n　　标准规定，10Mbps以太网采用中继器时，连接最大长度为2500米，最多经过4个中继器，信号在介质中传输速度小于光速c，一般范围为0.6~0.8c，取0.7c，则最大传输时延为（2500*4）/0.7c,因此规定对于10Mbps以太网规定一帧的最小发送时间必须为51.2μs。\n　　51.2 μs为512bit即64字节数据在10Mbps以太网下的发送时间。  \n\n<!--more-->\n　　\n## 2. MAC地址 & IP地址\n　　MAC地址和IP地址都可以用来标识主机，为什么不只用其中的一个？  \n### 1. 如果只用IP地址\n　　如果不用mac地址，所有设备都只有IP地址，那么有两种情况：IP地址是出厂分配的；IP地址是由路由器动态分配的；  \n　　第一种情况下，IP地址会不够用；另外，由于是出厂分配的，那么设备在接入不同的网络时，便无法利用IP地址的网络号、子网号等来进行路由，会导致路由表需要不断的更新，且路由表会很大。  \n　　第二种情况下，在设备还没有分配到IP地址前，由于设备没有标识，便无法与路由器通信，进而也不可能被分配到IP地址。\n### 2. 如果只用MAC地址\n　　设备只有MAC地址，也会遇到只用IP地址时所遇到的情况，分析过程一样。\n### 3. 其他\n　　数据包中的IP地址是终点地址，而mac地址则是下一跳地址，经过路由器时IP地址不会改变而mac则会变化。\n　　\n## 3. 集线器（hub） & 交换机（网桥） & 路由器\n　　集线器工作在物理层，交换机工作在数据链路层，路由器工作在网络层。  \n　　集线器的数据传输方式是广播，只对物理信号进行放大中继，所有端口属于一个冲突域；而交换机则基于MAC地址，能够完成数据包到合适端口的转发，每个端口是一个独立的冲突域。路由器转发基于IP地址，能够隔绝广播域。  \n　　集线器所有端口共享集线器的总带宽；交换机每个端口都有自己的带宽，因而多个端口队之间可以同时传输数据。  \n　　交换机具有全双工的工作模式，也就是可以同时发送和接受数据，而集线器只有半双工模式。  \n　　交换机用于组建局域网，路由器将组好的局域网连接起来。 \n","slug":"ethernet","published":1,"updated":"2018-06-23T13:06:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjohyvht0004hfzyfrxqy910","content":"<h2 id=\"1-以太网最小帧长\"><a href=\"#1-以太网最小帧长\" class=\"headerlink\" title=\"1. 以太网最小帧长\"></a>1. 以太网最小帧长</h2><p>　　以太网中的最小帧长为64字节（包括以太网帧的前后部分：14+4字节）。亦即数据段为46字节。<br>　　64字节的计算过程涉及以太网的载波监听冲突检测机制。基本原理是一个发送端需要在发送完数据前能够监听到在此信道上在它之前已经开始发送数据的发送冲突。在最极端的情况下，两个发送端距离最远，第一个发送端A在开始发送数据后，数据在经过t时间后会到达发送端B，在到达之前B监听不到数据因此也开始发送数据，B开始发送后随机监听到A的数据，因此发出阻塞信号。经过时间t后阻塞信号到达A，要求此时A数据还没有发送完毕，才能检测到数据发送出错。也就是发送数据的时间要大于2t。<br>　　标准规定，10Mbps以太网采用中继器时，连接最大长度为2500米，最多经过4个中继器，信号在介质中传输速度小于光速c，一般范围为0.6~0.8c，取0.7c，则最大传输时延为（2500*4）/0.7c,因此规定对于10Mbps以太网规定一帧的最小发送时间必须为51.2μs。<br>　　51.2 μs为512bit即64字节数据在10Mbps以太网下的发送时间。  </p>\n<a id=\"more\"></a>\n<p>　　</p>\n<h2 id=\"2-MAC地址-amp-IP地址\"><a href=\"#2-MAC地址-amp-IP地址\" class=\"headerlink\" title=\"2. MAC地址 &amp; IP地址\"></a>2. MAC地址 &amp; IP地址</h2><p>　　MAC地址和IP地址都可以用来标识主机，为什么不只用其中的一个？  </p>\n<h3 id=\"1-如果只用IP地址\"><a href=\"#1-如果只用IP地址\" class=\"headerlink\" title=\"1. 如果只用IP地址\"></a>1. 如果只用IP地址</h3><p>　　如果不用mac地址，所有设备都只有IP地址，那么有两种情况：IP地址是出厂分配的；IP地址是由路由器动态分配的；<br>　　第一种情况下，IP地址会不够用；另外，由于是出厂分配的，那么设备在接入不同的网络时，便无法利用IP地址的网络号、子网号等来进行路由，会导致路由表需要不断的更新，且路由表会很大。<br>　　第二种情况下，在设备还没有分配到IP地址前，由于设备没有标识，便无法与路由器通信，进而也不可能被分配到IP地址。</p>\n<h3 id=\"2-如果只用MAC地址\"><a href=\"#2-如果只用MAC地址\" class=\"headerlink\" title=\"2. 如果只用MAC地址\"></a>2. 如果只用MAC地址</h3><p>　　设备只有MAC地址，也会遇到只用IP地址时所遇到的情况，分析过程一样。</p>\n<h3 id=\"3-其他\"><a href=\"#3-其他\" class=\"headerlink\" title=\"3. 其他\"></a>3. 其他</h3><p>　　数据包中的IP地址是终点地址，而mac地址则是下一跳地址，经过路由器时IP地址不会改变而mac则会变化。\n　　</p>\n<h2 id=\"3-集线器（hub）-amp-交换机（网桥）-amp-路由器\"><a href=\"#3-集线器（hub）-amp-交换机（网桥）-amp-路由器\" class=\"headerlink\" title=\"3. 集线器（hub） &amp; 交换机（网桥） &amp; 路由器\"></a>3. 集线器（hub） &amp; 交换机（网桥） &amp; 路由器</h2><p>　　集线器工作在物理层，交换机工作在数据链路层，路由器工作在网络层。<br>　　集线器的数据传输方式是广播，只对物理信号进行放大中继，所有端口属于一个冲突域；而交换机则基于MAC地址，能够完成数据包到合适端口的转发，每个端口是一个独立的冲突域。路由器转发基于IP地址，能够隔绝广播域。<br>　　集线器所有端口共享集线器的总带宽；交换机每个端口都有自己的带宽，因而多个端口队之间可以同时传输数据。<br>　　交换机具有全双工的工作模式，也就是可以同时发送和接受数据，而集线器只有半双工模式。<br>　　交换机用于组建局域网，路由器将组好的局域网连接起来。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-以太网最小帧长\"><a href=\"#1-以太网最小帧长\" class=\"headerlink\" title=\"1. 以太网最小帧长\"></a>1. 以太网最小帧长</h2><p>　　以太网中的最小帧长为64字节（包括以太网帧的前后部分：14+4字节）。亦即数据段为46字节。<br>　　64字节的计算过程涉及以太网的载波监听冲突检测机制。基本原理是一个发送端需要在发送完数据前能够监听到在此信道上在它之前已经开始发送数据的发送冲突。在最极端的情况下，两个发送端距离最远，第一个发送端A在开始发送数据后，数据在经过t时间后会到达发送端B，在到达之前B监听不到数据因此也开始发送数据，B开始发送后随机监听到A的数据，因此发出阻塞信号。经过时间t后阻塞信号到达A，要求此时A数据还没有发送完毕，才能检测到数据发送出错。也就是发送数据的时间要大于2t。<br>　　标准规定，10Mbps以太网采用中继器时，连接最大长度为2500米，最多经过4个中继器，信号在介质中传输速度小于光速c，一般范围为0.6~0.8c，取0.7c，则最大传输时延为（2500*4）/0.7c,因此规定对于10Mbps以太网规定一帧的最小发送时间必须为51.2μs。<br>　　51.2 μs为512bit即64字节数据在10Mbps以太网下的发送时间。  </p>","more":"<p>　　</p>\n<h2 id=\"2-MAC地址-amp-IP地址\"><a href=\"#2-MAC地址-amp-IP地址\" class=\"headerlink\" title=\"2. MAC地址 &amp; IP地址\"></a>2. MAC地址 &amp; IP地址</h2><p>　　MAC地址和IP地址都可以用来标识主机，为什么不只用其中的一个？  </p>\n<h3 id=\"1-如果只用IP地址\"><a href=\"#1-如果只用IP地址\" class=\"headerlink\" title=\"1. 如果只用IP地址\"></a>1. 如果只用IP地址</h3><p>　　如果不用mac地址，所有设备都只有IP地址，那么有两种情况：IP地址是出厂分配的；IP地址是由路由器动态分配的；<br>　　第一种情况下，IP地址会不够用；另外，由于是出厂分配的，那么设备在接入不同的网络时，便无法利用IP地址的网络号、子网号等来进行路由，会导致路由表需要不断的更新，且路由表会很大。<br>　　第二种情况下，在设备还没有分配到IP地址前，由于设备没有标识，便无法与路由器通信，进而也不可能被分配到IP地址。</p>\n<h3 id=\"2-如果只用MAC地址\"><a href=\"#2-如果只用MAC地址\" class=\"headerlink\" title=\"2. 如果只用MAC地址\"></a>2. 如果只用MAC地址</h3><p>　　设备只有MAC地址，也会遇到只用IP地址时所遇到的情况，分析过程一样。</p>\n<h3 id=\"3-其他\"><a href=\"#3-其他\" class=\"headerlink\" title=\"3. 其他\"></a>3. 其他</h3><p>　　数据包中的IP地址是终点地址，而mac地址则是下一跳地址，经过路由器时IP地址不会改变而mac则会变化。\n　　</p>\n<h2 id=\"3-集线器（hub）-amp-交换机（网桥）-amp-路由器\"><a href=\"#3-集线器（hub）-amp-交换机（网桥）-amp-路由器\" class=\"headerlink\" title=\"3. 集线器（hub） &amp; 交换机（网桥） &amp; 路由器\"></a>3. 集线器（hub） &amp; 交换机（网桥） &amp; 路由器</h2><p>　　集线器工作在物理层，交换机工作在数据链路层，路由器工作在网络层。<br>　　集线器的数据传输方式是广播，只对物理信号进行放大中继，所有端口属于一个冲突域；而交换机则基于MAC地址，能够完成数据包到合适端口的转发，每个端口是一个独立的冲突域。路由器转发基于IP地址，能够隔绝广播域。<br>　　集线器所有端口共享集线器的总带宽；交换机每个端口都有自己的带宽，因而多个端口队之间可以同时传输数据。<br>　　交换机具有全双工的工作模式，也就是可以同时发送和接受数据，而集线器只有半双工模式。<br>　　交换机用于组建局域网，路由器将组好的局域网连接起来。 </p>"},{"title":"Boot_Singlecore","date":"2018-07-03T14:51:09.000Z","_content":"\n## 1. EEPROM BOOT & POST(Power On Self Test)  \n　　evmc6678评估板上有一块128KB的EEPROM，这块内存主要用于烧写IBL（Intermediate BootLoader）即二次引导的程序，或者烧写POST上电自检程序。其中在烧写程序时有两个总线地址，一个是0x50，一个是0x51，两个地址分别代表寻址128kB的其中64KB，前者默认用来烧写POST程序，后者一般用来烧写IBL。两种方式通过SW5的PIN4来区分（on：0x50，off：0x51），可以同时存在，不互相影响，启动时根据开关设置从相应位置读取程序。\n\n<!--more-->\n### POST\n　　POST例程位于MCSDK安装目录下，从 mcsdk >tools >post >docs >readme.txt中查看到具体的将POST程序烧写到EEPROM中的步骤。下面简单说明一下步骤：\n> tips: ti文档中的txt文件直接用windows的记事本打开会有格式问题，可以用vscode或者notepad++打开。  \n> 1. 重新编译生成POST工程文件。即clean project >> build project。(不是必要的)  \n> 2. 由于POST需要利用EEPROM烧写工具进行烧写，将 tools >post >evmc6678l >bin >post_i2crom.bin 拷贝到 tools　>writer >eeprom >evmc6678l >bin下。  \n> 3. 修改该目录下的eepromwriter_input.txt文件，设置file_name为post_i2crom.bin，bus_addr为0x50，其它为0.  \n> 4. 将tools >writer >eeprom >evmc6678l 工程impot到CCS中，重新生成.out文件。  \n> 5. 连接开发板，launch目标文件，连接core0，使用evmc6678.gel初始化内存,将生成的.out文件load到core0。  \n> 6. view >memory browser,在打开的窗口中输入0x0C000000，找到该内存，在该处右击鼠标，load memory,选择post_i2crom.bin文件，type选择ti raw data，点击next，确认地址是0x0C000000，为32bit，swap没有勾选，点击finish。  \n> 7. console窗口输出successfully时，terminate debug。确保bootmode管脚为I2C post boot,按下REST_FULL按钮,可以在串口中看到如下数据：  \n> <div align=center><img src=\"post_result.png\" height=400px width=600px alt=\"img\"></div>\n> 说明一下烧写程序的工作（包括EEPROM，NAND，NOR烧写程序），我们在CCS中的Memory Browser窗口将程序烧写到DDR内存中，另外烧写程序读取硬盘bin目录下（*input.txt中指定的文件）的程序文件，并解析该文件是否符合要求。若符合则直接将在DDR内存中文件烧写到指定内存（EEPROM，NAND，NOR）中。\n\n### RBL直接读取EEPROM程序\n　　根据实验结果以及[搜索结果](https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/388490?Can-c6678-be-booted-from-directly-i2c-eeprom-)，程序文件只能烧到0x50对应的64KB中并且启动执行，而0x51对应的EEPROM只是保留给IBL启动程序的。 RBL对读取的程序文件格式有一定的要求，生成的.out文件需要经过工具链的处理。相应的处理流程和SPI nor flash boot 一样，这个留在后面叙述。  \n　　由于程序是烧在0x50处，因而流程和POST是一致的，启动时开关设置也一致。我烧写的是Led_play例程，能够成功运行。  \n\n## 2. IBL NAND|NOR FLASH BOOT\n　　由于EPPROM大小只有128kB（64kB可用于用户程序），当用户程序文件较大时，就需要将文件放在FLASH中，此时一种可选的方法就是通过二级引导程序（IBL）来将FLASH中的文件搬运到RAM中运行，而IBL文件就是放在EEPROM中的。另外由于NAND FLASH的特点（不支持随机读取，读取时是一块一块的），因而不能直接在NAND FLASH上运行代码。因此RBL也不支持直接的NAND FLASH BOOT。  \n　　将IBL烧写到EEPROM中的操作和上面类似，但是需要将bus_addr设置为0x51，烧写文件为i2crom_0x51_c6678_le.bin，同时在烧写完成后需要配置boot param table。具体操作如下：\n> 1. 打开 mcsdk >tools >boot_loader >ibl >src >make >bin >i2cConfig.gel,找到setConfig_c6678_main函数，将  \n> ibl.bootModes[0].u.norBoot.bootFormat\t= ibl_BOOT_FORMAT_BBLOB;　　　　　改写为 \n> ibl.bootModes[0].u.norBoot.bootFormat\t= ibl_BOOT_FORMAT_ELF;\n> 其中BBLOB表示二进制文件即.bin，而ELF文件指生成的.out文件，这样修改后烧写时load memory操作就可以使用生成的.out文件，更加方便，不用利用工具链转换成.bin。缺点就是.out文件中包含比较多无用的数据，文件较大。  \n> 2. 接着连接开发板，将mcsdk >tools >boot_loader >ibl >src >make >bin >i2cparam_0x51_c6678_le_0x500.out load 到core0，并执行。同时执行load gel操作，将上面修改的gel文件load进来。注意前面evmc6678.gel还是要load。然后 scripts >EVM c6678 IBL >setConfig_c6678_main。等待几秒钟，在console窗口中按回车健，看到I2c table write complete 表示写启动参数表成功了。  \n> tips：在第二步中，需要先resume即先执行程序，然后执行gel文件的setConfig_c6678_main，不然会显示出错。  \n> 3. 这样IBL就烧写好了，以后如果没有需要修改boot param的话，就不用在执行这个过程了。  \n> 4. 接着需要将自己的程序烧写到NOR FLASH中，具体步骤可以查看mcsdk >tools >writer >nor >docs >readme.txt。与烧写EEPROM类似，主要差别就是memory browser处地址为0x80000000。\n> 4. 按照IBL NOR BOOT设置开关，重启，可以发现程序跑起来了~_~。  \n\n\n## 3. SPI NOR FLASH BOOT\n　　evmc6678l也可直由RBL引导，从NOR FLASH处启动。RBL只能识别boot table format，而且只能使用大端模式。因此我们主要的工作是将生成的.out文件经过工具链进行处理，转换为能够被RBL识别的文件格式。此处的资料来源主要是[TI论坛](https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/447109?C6678-multicore-booting-from-SPI-Nor-flash)。文档为*Booting from the SPI NOR on C6670/C6678 EVM*。[更新资料](https://www.google.com.hk/url?sa=t&rct=j&q=&esrc=s&source=web&cd=7&ved=0ahUKEwjLroyPy4TcAhVDa94KHWJ-BFkQFghNMAY&url=%68%74%74%70%3a%2f%2f%77%77%77%2e%64%65%79%69%73%75%70%70%6f%72%74%2e%63%6f%6d%2f%63%66%73%2d%66%69%6c%65%2e%61%73%68%78%2f%5f%5f%6b%65%79%2f%63%6f%6d%6d%75%6e%69%74%79%73%65%72%76%65%72%2d%64%69%73%63%75%73%73%69%6f%6e%73%2d%63%6f%6d%70%6f%6e%65%6e%74%73%2d%66%69%6c%65%73%2f%35%33%2f%33%36%31%37%2e%4b%65%79%73%74%6f%6e%65%2d%31%2d%53%50%49%2d%4e%4f%52%2d%5f%32%46%35%34%41%38%35%32%36%35%36%42%41%34%39%41%45%35%34%45%43%41%35%33%45%38%36%43%30%46%36%31%38%42%34%45%37%39%39%38%5f%2e%70%64%66&usg=AOvVaw1QyyLgyoSvds9ox4LGi3lZ)  \n#### hex6x.exe\n　　这个工具的主要作用是将.out转换为Boot table format,使得RBL能够读取到程序二进制文件的各个段。该工具的输入是一个.rmd文件。包括以下部分：\n> C:\\Users\\DarkLing\\Desktop\\KeystoneI_bootloader_workshop\\boot_image\\SPI_Bootloader\\led_play.out  \n> -a  \n> -boot  \n> -e _c_int00  \n>   \n> ROMS  \n> {  \n>\tROM1:  org = 0x0C000000, length = 0x100000, memwidth = 32, romwidth = 32  \n>\tfiles = { C:\\Users\\DarkLing\\Desktop\\led_test\\led_play.btbl>}  \n>}  \n\n　　创建.rmd文件后执行命令:  \n> .\\hex6x.exe .\\led_play.rmd  \n\n　　生成了led_play.btbl文件。boot table format如下所示：\n<div align=center><img src=\"boot_table_format.png\" height=500px width=450px alt=\"img\"></div>\n\n#### b2i2c.exe\n　　将.btbl文件以0x80字节分块，并附加长度和校验和信息，以符合RBL的需要。  \n> .\\b2i2c.exe .\\led_play.btbl .\\led_play.i2c\n\n　　生成led_play.i2c\n\n#### b2ccs.exe\n　　将.i2c转为CCS能够接收的格式。\n> .\\b2ccs .\\led_play.i2c .\\led_play.ccs  \n\n　　生成led_play.ccs  \n\n#### romparse.exe\n　　将boot table 和boot parameter table 结合，需要有.map文件作为输入:\n> section {  \n> boot_mode = 50  \n> param_index = 0  \n> options = 1  \n> core_freq_mhz = 1000  \n> exe_file = \"led_play.ccs\"  \n> next_dev_addr_ext = 0x0  \n> sw_pll_prediv = 5  \n> sw_pll_mult = 32  \n> sw_pll_postdiv = 2  \n> sw_pll_flags = 1  \n> addr_width = 24  \n> n_pins = 4  \n> csel = 0  \n> mode = 0  \n> c2t_delay = 0  \n> bus_freq_mhz = 0  \n> bus_freq_khz = 500  \n> }\n\n> .\\romparse.exe .\\nysh.spi.map\n\n\n　　生成i2crom.ccs.修改生成的i2crom.ccs将第九行的51改为00。这个是I2c的地址,需要改为00，[原因未知](https://e2echina.ti.com/question_answer/dsp_arm/c6000_multicore/f/53/p/136365/382193#382193)。个人理解是，由于是使用SPI连接flash启动，不需要I2c，而0x51则是使用EEPROM作二级引导使用的，因而需要设置为0，表示不使用。  \n\n#### byteswapccs.exe\n　　将小端文件转为大端。\n\n> .\\byteswapccs.exe .\\i2crom.ccs .\\app.dat\n\n　　生成的app.dat文件可以通过nor writer烧写到nor flash中。  \ntips：  \n　　注意到此时生成的是app.dat文件，也可以通过ccs2bin.exe将i2crom.ccs转为.bin文件：\n> .\\ccs2bin.exe  -swap .\\i2rom.ccs .\\app.bin  \n\n　　ccs2bin.exe可以使用-swap参数表示大小端转换。 \n\n但是操作文档中说到:  \nThe EVM uses 24 bit NOR connected on CHIP select 0. While flashing using the NOR writer use the .dat as is and don’t convert the .dat into a bin file.   \n实际操作时，发现app.bin文件烧写时如果开关不是no boot mode 烧写后无法启动。而app.dat文件则不存在这个问题。\n","source":"_posts/Boot-Singlecore.md","raw":"---\ntitle: Boot_Singlecore\ndate: 2018-07-03 22:51:09\ntags: evmc6678l\n---\n\n## 1. EEPROM BOOT & POST(Power On Self Test)  \n　　evmc6678评估板上有一块128KB的EEPROM，这块内存主要用于烧写IBL（Intermediate BootLoader）即二次引导的程序，或者烧写POST上电自检程序。其中在烧写程序时有两个总线地址，一个是0x50，一个是0x51，两个地址分别代表寻址128kB的其中64KB，前者默认用来烧写POST程序，后者一般用来烧写IBL。两种方式通过SW5的PIN4来区分（on：0x50，off：0x51），可以同时存在，不互相影响，启动时根据开关设置从相应位置读取程序。\n\n<!--more-->\n### POST\n　　POST例程位于MCSDK安装目录下，从 mcsdk >tools >post >docs >readme.txt中查看到具体的将POST程序烧写到EEPROM中的步骤。下面简单说明一下步骤：\n> tips: ti文档中的txt文件直接用windows的记事本打开会有格式问题，可以用vscode或者notepad++打开。  \n> 1. 重新编译生成POST工程文件。即clean project >> build project。(不是必要的)  \n> 2. 由于POST需要利用EEPROM烧写工具进行烧写，将 tools >post >evmc6678l >bin >post_i2crom.bin 拷贝到 tools　>writer >eeprom >evmc6678l >bin下。  \n> 3. 修改该目录下的eepromwriter_input.txt文件，设置file_name为post_i2crom.bin，bus_addr为0x50，其它为0.  \n> 4. 将tools >writer >eeprom >evmc6678l 工程impot到CCS中，重新生成.out文件。  \n> 5. 连接开发板，launch目标文件，连接core0，使用evmc6678.gel初始化内存,将生成的.out文件load到core0。  \n> 6. view >memory browser,在打开的窗口中输入0x0C000000，找到该内存，在该处右击鼠标，load memory,选择post_i2crom.bin文件，type选择ti raw data，点击next，确认地址是0x0C000000，为32bit，swap没有勾选，点击finish。  \n> 7. console窗口输出successfully时，terminate debug。确保bootmode管脚为I2C post boot,按下REST_FULL按钮,可以在串口中看到如下数据：  \n> <div align=center><img src=\"post_result.png\" height=400px width=600px alt=\"img\"></div>\n> 说明一下烧写程序的工作（包括EEPROM，NAND，NOR烧写程序），我们在CCS中的Memory Browser窗口将程序烧写到DDR内存中，另外烧写程序读取硬盘bin目录下（*input.txt中指定的文件）的程序文件，并解析该文件是否符合要求。若符合则直接将在DDR内存中文件烧写到指定内存（EEPROM，NAND，NOR）中。\n\n### RBL直接读取EEPROM程序\n　　根据实验结果以及[搜索结果](https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/388490?Can-c6678-be-booted-from-directly-i2c-eeprom-)，程序文件只能烧到0x50对应的64KB中并且启动执行，而0x51对应的EEPROM只是保留给IBL启动程序的。 RBL对读取的程序文件格式有一定的要求，生成的.out文件需要经过工具链的处理。相应的处理流程和SPI nor flash boot 一样，这个留在后面叙述。  \n　　由于程序是烧在0x50处，因而流程和POST是一致的，启动时开关设置也一致。我烧写的是Led_play例程，能够成功运行。  \n\n## 2. IBL NAND|NOR FLASH BOOT\n　　由于EPPROM大小只有128kB（64kB可用于用户程序），当用户程序文件较大时，就需要将文件放在FLASH中，此时一种可选的方法就是通过二级引导程序（IBL）来将FLASH中的文件搬运到RAM中运行，而IBL文件就是放在EEPROM中的。另外由于NAND FLASH的特点（不支持随机读取，读取时是一块一块的），因而不能直接在NAND FLASH上运行代码。因此RBL也不支持直接的NAND FLASH BOOT。  \n　　将IBL烧写到EEPROM中的操作和上面类似，但是需要将bus_addr设置为0x51，烧写文件为i2crom_0x51_c6678_le.bin，同时在烧写完成后需要配置boot param table。具体操作如下：\n> 1. 打开 mcsdk >tools >boot_loader >ibl >src >make >bin >i2cConfig.gel,找到setConfig_c6678_main函数，将  \n> ibl.bootModes[0].u.norBoot.bootFormat\t= ibl_BOOT_FORMAT_BBLOB;　　　　　改写为 \n> ibl.bootModes[0].u.norBoot.bootFormat\t= ibl_BOOT_FORMAT_ELF;\n> 其中BBLOB表示二进制文件即.bin，而ELF文件指生成的.out文件，这样修改后烧写时load memory操作就可以使用生成的.out文件，更加方便，不用利用工具链转换成.bin。缺点就是.out文件中包含比较多无用的数据，文件较大。  \n> 2. 接着连接开发板，将mcsdk >tools >boot_loader >ibl >src >make >bin >i2cparam_0x51_c6678_le_0x500.out load 到core0，并执行。同时执行load gel操作，将上面修改的gel文件load进来。注意前面evmc6678.gel还是要load。然后 scripts >EVM c6678 IBL >setConfig_c6678_main。等待几秒钟，在console窗口中按回车健，看到I2c table write complete 表示写启动参数表成功了。  \n> tips：在第二步中，需要先resume即先执行程序，然后执行gel文件的setConfig_c6678_main，不然会显示出错。  \n> 3. 这样IBL就烧写好了，以后如果没有需要修改boot param的话，就不用在执行这个过程了。  \n> 4. 接着需要将自己的程序烧写到NOR FLASH中，具体步骤可以查看mcsdk >tools >writer >nor >docs >readme.txt。与烧写EEPROM类似，主要差别就是memory browser处地址为0x80000000。\n> 4. 按照IBL NOR BOOT设置开关，重启，可以发现程序跑起来了~_~。  \n\n\n## 3. SPI NOR FLASH BOOT\n　　evmc6678l也可直由RBL引导，从NOR FLASH处启动。RBL只能识别boot table format，而且只能使用大端模式。因此我们主要的工作是将生成的.out文件经过工具链进行处理，转换为能够被RBL识别的文件格式。此处的资料来源主要是[TI论坛](https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/447109?C6678-multicore-booting-from-SPI-Nor-flash)。文档为*Booting from the SPI NOR on C6670/C6678 EVM*。[更新资料](https://www.google.com.hk/url?sa=t&rct=j&q=&esrc=s&source=web&cd=7&ved=0ahUKEwjLroyPy4TcAhVDa94KHWJ-BFkQFghNMAY&url=%68%74%74%70%3a%2f%2f%77%77%77%2e%64%65%79%69%73%75%70%70%6f%72%74%2e%63%6f%6d%2f%63%66%73%2d%66%69%6c%65%2e%61%73%68%78%2f%5f%5f%6b%65%79%2f%63%6f%6d%6d%75%6e%69%74%79%73%65%72%76%65%72%2d%64%69%73%63%75%73%73%69%6f%6e%73%2d%63%6f%6d%70%6f%6e%65%6e%74%73%2d%66%69%6c%65%73%2f%35%33%2f%33%36%31%37%2e%4b%65%79%73%74%6f%6e%65%2d%31%2d%53%50%49%2d%4e%4f%52%2d%5f%32%46%35%34%41%38%35%32%36%35%36%42%41%34%39%41%45%35%34%45%43%41%35%33%45%38%36%43%30%46%36%31%38%42%34%45%37%39%39%38%5f%2e%70%64%66&usg=AOvVaw1QyyLgyoSvds9ox4LGi3lZ)  \n#### hex6x.exe\n　　这个工具的主要作用是将.out转换为Boot table format,使得RBL能够读取到程序二进制文件的各个段。该工具的输入是一个.rmd文件。包括以下部分：\n> C:\\Users\\DarkLing\\Desktop\\KeystoneI_bootloader_workshop\\boot_image\\SPI_Bootloader\\led_play.out  \n> -a  \n> -boot  \n> -e _c_int00  \n>   \n> ROMS  \n> {  \n>\tROM1:  org = 0x0C000000, length = 0x100000, memwidth = 32, romwidth = 32  \n>\tfiles = { C:\\Users\\DarkLing\\Desktop\\led_test\\led_play.btbl>}  \n>}  \n\n　　创建.rmd文件后执行命令:  \n> .\\hex6x.exe .\\led_play.rmd  \n\n　　生成了led_play.btbl文件。boot table format如下所示：\n<div align=center><img src=\"boot_table_format.png\" height=500px width=450px alt=\"img\"></div>\n\n#### b2i2c.exe\n　　将.btbl文件以0x80字节分块，并附加长度和校验和信息，以符合RBL的需要。  \n> .\\b2i2c.exe .\\led_play.btbl .\\led_play.i2c\n\n　　生成led_play.i2c\n\n#### b2ccs.exe\n　　将.i2c转为CCS能够接收的格式。\n> .\\b2ccs .\\led_play.i2c .\\led_play.ccs  \n\n　　生成led_play.ccs  \n\n#### romparse.exe\n　　将boot table 和boot parameter table 结合，需要有.map文件作为输入:\n> section {  \n> boot_mode = 50  \n> param_index = 0  \n> options = 1  \n> core_freq_mhz = 1000  \n> exe_file = \"led_play.ccs\"  \n> next_dev_addr_ext = 0x0  \n> sw_pll_prediv = 5  \n> sw_pll_mult = 32  \n> sw_pll_postdiv = 2  \n> sw_pll_flags = 1  \n> addr_width = 24  \n> n_pins = 4  \n> csel = 0  \n> mode = 0  \n> c2t_delay = 0  \n> bus_freq_mhz = 0  \n> bus_freq_khz = 500  \n> }\n\n> .\\romparse.exe .\\nysh.spi.map\n\n\n　　生成i2crom.ccs.修改生成的i2crom.ccs将第九行的51改为00。这个是I2c的地址,需要改为00，[原因未知](https://e2echina.ti.com/question_answer/dsp_arm/c6000_multicore/f/53/p/136365/382193#382193)。个人理解是，由于是使用SPI连接flash启动，不需要I2c，而0x51则是使用EEPROM作二级引导使用的，因而需要设置为0，表示不使用。  \n\n#### byteswapccs.exe\n　　将小端文件转为大端。\n\n> .\\byteswapccs.exe .\\i2crom.ccs .\\app.dat\n\n　　生成的app.dat文件可以通过nor writer烧写到nor flash中。  \ntips：  \n　　注意到此时生成的是app.dat文件，也可以通过ccs2bin.exe将i2crom.ccs转为.bin文件：\n> .\\ccs2bin.exe  -swap .\\i2rom.ccs .\\app.bin  \n\n　　ccs2bin.exe可以使用-swap参数表示大小端转换。 \n\n但是操作文档中说到:  \nThe EVM uses 24 bit NOR connected on CHIP select 0. While flashing using the NOR writer use the .dat as is and don’t convert the .dat into a bin file.   \n实际操作时，发现app.bin文件烧写时如果开关不是no boot mode 烧写后无法启动。而app.dat文件则不存在这个问题。\n","slug":"Boot-Singlecore","published":1,"updated":"2018-07-04T04:44:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjohyvi8000chfzy4vkmsk23","content":"<h2 id=\"1-EEPROM-BOOT-amp-POST-Power-On-Self-Test\"><a href=\"#1-EEPROM-BOOT-amp-POST-Power-On-Self-Test\" class=\"headerlink\" title=\"1. EEPROM BOOT &amp; POST(Power On Self Test)\"></a>1. EEPROM BOOT &amp; POST(Power On Self Test)</h2><p>　　evmc6678评估板上有一块128KB的EEPROM，这块内存主要用于烧写IBL（Intermediate BootLoader）即二次引导的程序，或者烧写POST上电自检程序。其中在烧写程序时有两个总线地址，一个是0x50，一个是0x51，两个地址分别代表寻址128kB的其中64KB，前者默认用来烧写POST程序，后者一般用来烧写IBL。两种方式通过SW5的PIN4来区分（on：0x50，off：0x51），可以同时存在，不互相影响，启动时根据开关设置从相应位置读取程序。</p>\n<a id=\"more\"></a>\n<h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h3><p>　　POST例程位于MCSDK安装目录下，从 mcsdk &gt;tools &gt;post &gt;docs &gt;readme.txt中查看到具体的将POST程序烧写到EEPROM中的步骤。下面简单说明一下步骤：</p>\n<blockquote>\n<p>tips: ti文档中的txt文件直接用windows的记事本打开会有格式问题，可以用vscode或者notepad++打开。  </p>\n<ol>\n<li>重新编译生成POST工程文件。即clean project &gt;&gt; build project。(不是必要的)  </li>\n<li>由于POST需要利用EEPROM烧写工具进行烧写，将 tools &gt;post &gt;evmc6678l &gt;bin &gt;post_i2crom.bin 拷贝到 tools　&gt;writer &gt;eeprom &gt;evmc6678l &gt;bin下。  </li>\n<li>修改该目录下的eepromwriter_input.txt文件，设置file_name为post_i2crom.bin，bus_addr为0x50，其它为0.  </li>\n<li>将tools &gt;writer &gt;eeprom &gt;evmc6678l 工程impot到CCS中，重新生成.out文件。  </li>\n<li>连接开发板，launch目标文件，连接core0，使用evmc6678.gel初始化内存,将生成的.out文件load到core0。  </li>\n<li>view &gt;memory browser,在打开的窗口中输入0x0C000000，找到该内存，在该处右击鼠标，load memory,选择post_i2crom.bin文件，type选择ti raw data，点击next，确认地址是0x0C000000，为32bit，swap没有勾选，点击finish。  </li>\n<li>console窗口输出successfully时，terminate debug。确保bootmode管脚为I2C post boot,按下REST_FULL按钮,可以在串口中看到如下数据：<br><div align=\"center\"><img src=\"/2018/07/03/Boot-Singlecore/post_result.png\" height=\"400px\" width=\"600px\" alt=\"img\"></div><br>说明一下烧写程序的工作（包括EEPROM，NAND，NOR烧写程序），我们在CCS中的Memory Browser窗口将程序烧写到DDR内存中，另外烧写程序读取硬盘bin目录下（*input.txt中指定的文件）的程序文件，并解析该文件是否符合要求。若符合则直接将在DDR内存中文件烧写到指定内存（EEPROM，NAND，NOR）中。</li>\n</ol>\n</blockquote>\n<h3 id=\"RBL直接读取EEPROM程序\"><a href=\"#RBL直接读取EEPROM程序\" class=\"headerlink\" title=\"RBL直接读取EEPROM程序\"></a>RBL直接读取EEPROM程序</h3><p>　　根据实验结果以及<a href=\"https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/388490?Can-c6678-be-booted-from-directly-i2c-eeprom-\" target=\"_blank\" rel=\"noopener\">搜索结果</a>，程序文件只能烧到0x50对应的64KB中并且启动执行，而0x51对应的EEPROM只是保留给IBL启动程序的。 RBL对读取的程序文件格式有一定的要求，生成的.out文件需要经过工具链的处理。相应的处理流程和SPI nor flash boot 一样，这个留在后面叙述。<br>　　由于程序是烧在0x50处，因而流程和POST是一致的，启动时开关设置也一致。我烧写的是Led_play例程，能够成功运行。  </p>\n<h2 id=\"2-IBL-NAND-NOR-FLASH-BOOT\"><a href=\"#2-IBL-NAND-NOR-FLASH-BOOT\" class=\"headerlink\" title=\"2. IBL NAND|NOR FLASH BOOT\"></a>2. IBL NAND|NOR FLASH BOOT</h2><p>　　由于EPPROM大小只有128kB（64kB可用于用户程序），当用户程序文件较大时，就需要将文件放在FLASH中，此时一种可选的方法就是通过二级引导程序（IBL）来将FLASH中的文件搬运到RAM中运行，而IBL文件就是放在EEPROM中的。另外由于NAND FLASH的特点（不支持随机读取，读取时是一块一块的），因而不能直接在NAND FLASH上运行代码。因此RBL也不支持直接的NAND FLASH BOOT。<br>　　将IBL烧写到EEPROM中的操作和上面类似，但是需要将bus_addr设置为0x51，烧写文件为i2crom_0x51_c6678_le.bin，同时在烧写完成后需要配置boot param table。具体操作如下：</p>\n<blockquote>\n<ol>\n<li>打开 mcsdk &gt;tools &gt;boot_loader &gt;ibl &gt;src &gt;make &gt;bin &gt;i2cConfig.gel,找到setConfig_c6678_main函数，将<br>ibl.bootModes[0].u.norBoot.bootFormat    = ibl_BOOT_FORMAT_BBLOB;　　　　　改写为<br>ibl.bootModes[0].u.norBoot.bootFormat    = ibl_BOOT_FORMAT_ELF;<br>其中BBLOB表示二进制文件即.bin，而ELF文件指生成的.out文件，这样修改后烧写时load memory操作就可以使用生成的.out文件，更加方便，不用利用工具链转换成.bin。缺点就是.out文件中包含比较多无用的数据，文件较大。  </li>\n<li>接着连接开发板，将mcsdk &gt;tools &gt;boot_loader &gt;ibl &gt;src &gt;make &gt;bin &gt;i2cparam_0x51_c6678_le_0x500.out load 到core0，并执行。同时执行load gel操作，将上面修改的gel文件load进来。注意前面evmc6678.gel还是要load。然后 scripts &gt;EVM c6678 IBL &gt;setConfig_c6678_main。等待几秒钟，在console窗口中按回车健，看到I2c table write complete 表示写启动参数表成功了。<br>tips：在第二步中，需要先resume即先执行程序，然后执行gel文件的setConfig_c6678_main，不然会显示出错。  </li>\n<li>这样IBL就烧写好了，以后如果没有需要修改boot param的话，就不用在执行这个过程了。  </li>\n<li>接着需要将自己的程序烧写到NOR FLASH中，具体步骤可以查看mcsdk &gt;tools &gt;writer &gt;nor &gt;docs &gt;readme.txt。与烧写EEPROM类似，主要差别就是memory browser处地址为0x80000000。</li>\n<li>按照IBL NOR BOOT设置开关，重启，可以发现程序跑起来了~_~。  </li>\n</ol>\n</blockquote>\n<h2 id=\"3-SPI-NOR-FLASH-BOOT\"><a href=\"#3-SPI-NOR-FLASH-BOOT\" class=\"headerlink\" title=\"3. SPI NOR FLASH BOOT\"></a>3. SPI NOR FLASH BOOT</h2><p>　　evmc6678l也可直由RBL引导，从NOR FLASH处启动。RBL只能识别boot table format，而且只能使用大端模式。因此我们主要的工作是将生成的.out文件经过工具链进行处理，转换为能够被RBL识别的文件格式。此处的资料来源主要是<a href=\"https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/447109?C6678-multicore-booting-from-SPI-Nor-flash\" target=\"_blank\" rel=\"noopener\">TI论坛</a>。文档为<em>Booting from the SPI NOR on C6670/C6678 EVM</em>。<a href=\"https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=7&amp;ved=0ahUKEwjLroyPy4TcAhVDa94KHWJ-BFkQFghNMAY&amp;url=%68%74%74%70%3a%2f%2f%77%77%77%2e%64%65%79%69%73%75%70%70%6f%72%74%2e%63%6f%6d%2f%63%66%73%2d%66%69%6c%65%2e%61%73%68%78%2f%5f%5f%6b%65%79%2f%63%6f%6d%6d%75%6e%69%74%79%73%65%72%76%65%72%2d%64%69%73%63%75%73%73%69%6f%6e%73%2d%63%6f%6d%70%6f%6e%65%6e%74%73%2d%66%69%6c%65%73%2f%35%33%2f%33%36%31%37%2e%4b%65%79%73%74%6f%6e%65%2d%31%2d%53%50%49%2d%4e%4f%52%2d%5f%32%46%35%34%41%38%35%32%36%35%36%42%41%34%39%41%45%35%34%45%43%41%35%33%45%38%36%43%30%46%36%31%38%42%34%45%37%39%39%38%5f%2e%70%64%66&amp;usg=AOvVaw1QyyLgyoSvds9ox4LGi3lZ\" target=\"_blank\" rel=\"noopener\">更新资料</a>  </p>\n<h4 id=\"hex6x-exe\"><a href=\"#hex6x-exe\" class=\"headerlink\" title=\"hex6x.exe\"></a>hex6x.exe</h4><p>　　这个工具的主要作用是将.out转换为Boot table format,使得RBL能够读取到程序二进制文件的各个段。该工具的输入是一个.rmd文件。包括以下部分：</p>\n<blockquote>\n<p>C:\\Users\\DarkLing\\Desktop\\KeystoneI_bootloader_workshop\\boot_image\\SPI_Bootloader\\led_play.out<br>-a<br>-boot<br>-e _c_int00  </p>\n<p>ROMS<br>{<br>   ROM1:  org = 0x0C000000, length = 0x100000, memwidth = 32, romwidth = 32<br>   files = { C:\\Users\\DarkLing\\Desktop\\led_test\\led_play.btbl&gt;}<br>}  </p>\n</blockquote>\n<p>　　创建.rmd文件后执行命令:  </p>\n<blockquote>\n<p>.\\hex6x.exe .\\led_play.rmd  </p>\n</blockquote>\n<p>　　生成了led_play.btbl文件。boot table format如下所示：</p>\n<div align=\"center\"><img src=\"/2018/07/03/Boot-Singlecore/boot_table_format.png\" height=\"500px\" width=\"450px\" alt=\"img\"></div>\n\n<h4 id=\"b2i2c-exe\"><a href=\"#b2i2c-exe\" class=\"headerlink\" title=\"b2i2c.exe\"></a>b2i2c.exe</h4><p>　　将.btbl文件以0x80字节分块，并附加长度和校验和信息，以符合RBL的需要。  </p>\n<blockquote>\n<p>.\\b2i2c.exe .\\led_play.btbl .\\led_play.i2c</p>\n</blockquote>\n<p>　　生成led_play.i2c</p>\n<h4 id=\"b2ccs-exe\"><a href=\"#b2ccs-exe\" class=\"headerlink\" title=\"b2ccs.exe\"></a>b2ccs.exe</h4><p>　　将.i2c转为CCS能够接收的格式。</p>\n<blockquote>\n<p>.\\b2ccs .\\led_play.i2c .\\led_play.ccs  </p>\n</blockquote>\n<p>　　生成led_play.ccs  </p>\n<h4 id=\"romparse-exe\"><a href=\"#romparse-exe\" class=\"headerlink\" title=\"romparse.exe\"></a>romparse.exe</h4><p>　　将boot table 和boot parameter table 结合，需要有.map文件作为输入:</p>\n<blockquote>\n<p>section {<br>boot_mode = 50<br>param_index = 0<br>options = 1<br>core_freq_mhz = 1000<br>exe_file = “led_play.ccs”<br>next_dev_addr_ext = 0x0<br>sw_pll_prediv = 5<br>sw_pll_mult = 32<br>sw_pll_postdiv = 2<br>sw_pll_flags = 1<br>addr_width = 24<br>n_pins = 4<br>csel = 0<br>mode = 0<br>c2t_delay = 0<br>bus_freq_mhz = 0<br>bus_freq_khz = 500<br>}</p>\n</blockquote>\n<blockquote>\n<p>.\\romparse.exe .\\nysh.spi.map</p>\n</blockquote>\n<p>　　生成i2crom.ccs.修改生成的i2crom.ccs将第九行的51改为00。这个是I2c的地址,需要改为00，<a href=\"https://e2echina.ti.com/question_answer/dsp_arm/c6000_multicore/f/53/p/136365/382193#382193\" target=\"_blank\" rel=\"noopener\">原因未知</a>。个人理解是，由于是使用SPI连接flash启动，不需要I2c，而0x51则是使用EEPROM作二级引导使用的，因而需要设置为0，表示不使用。  </p>\n<h4 id=\"byteswapccs-exe\"><a href=\"#byteswapccs-exe\" class=\"headerlink\" title=\"byteswapccs.exe\"></a>byteswapccs.exe</h4><p>　　将小端文件转为大端。</p>\n<blockquote>\n<p>.\\byteswapccs.exe .\\i2crom.ccs .\\app.dat</p>\n</blockquote>\n<p>　　生成的app.dat文件可以通过nor writer烧写到nor flash中。<br>tips：<br>　　注意到此时生成的是app.dat文件，也可以通过ccs2bin.exe将i2crom.ccs转为.bin文件：</p>\n<blockquote>\n<p>.\\ccs2bin.exe  -swap .\\i2rom.ccs .\\app.bin  </p>\n</blockquote>\n<p>　　ccs2bin.exe可以使用-swap参数表示大小端转换。 </p>\n<p>但是操作文档中说到:<br>The EVM uses 24 bit NOR connected on CHIP select 0. While flashing using the NOR writer use the .dat as is and don’t convert the .dat into a bin file.<br>实际操作时，发现app.bin文件烧写时如果开关不是no boot mode 烧写后无法启动。而app.dat文件则不存在这个问题。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-EEPROM-BOOT-amp-POST-Power-On-Self-Test\"><a href=\"#1-EEPROM-BOOT-amp-POST-Power-On-Self-Test\" class=\"headerlink\" title=\"1. EEPROM BOOT &amp; POST(Power On Self Test)\"></a>1. EEPROM BOOT &amp; POST(Power On Self Test)</h2><p>　　evmc6678评估板上有一块128KB的EEPROM，这块内存主要用于烧写IBL（Intermediate BootLoader）即二次引导的程序，或者烧写POST上电自检程序。其中在烧写程序时有两个总线地址，一个是0x50，一个是0x51，两个地址分别代表寻址128kB的其中64KB，前者默认用来烧写POST程序，后者一般用来烧写IBL。两种方式通过SW5的PIN4来区分（on：0x50，off：0x51），可以同时存在，不互相影响，启动时根据开关设置从相应位置读取程序。</p>","more":"<h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h3><p>　　POST例程位于MCSDK安装目录下，从 mcsdk &gt;tools &gt;post &gt;docs &gt;readme.txt中查看到具体的将POST程序烧写到EEPROM中的步骤。下面简单说明一下步骤：</p>\n<blockquote>\n<p>tips: ti文档中的txt文件直接用windows的记事本打开会有格式问题，可以用vscode或者notepad++打开。  </p>\n<ol>\n<li>重新编译生成POST工程文件。即clean project &gt;&gt; build project。(不是必要的)  </li>\n<li>由于POST需要利用EEPROM烧写工具进行烧写，将 tools &gt;post &gt;evmc6678l &gt;bin &gt;post_i2crom.bin 拷贝到 tools　&gt;writer &gt;eeprom &gt;evmc6678l &gt;bin下。  </li>\n<li>修改该目录下的eepromwriter_input.txt文件，设置file_name为post_i2crom.bin，bus_addr为0x50，其它为0.  </li>\n<li>将tools &gt;writer &gt;eeprom &gt;evmc6678l 工程impot到CCS中，重新生成.out文件。  </li>\n<li>连接开发板，launch目标文件，连接core0，使用evmc6678.gel初始化内存,将生成的.out文件load到core0。  </li>\n<li>view &gt;memory browser,在打开的窗口中输入0x0C000000，找到该内存，在该处右击鼠标，load memory,选择post_i2crom.bin文件，type选择ti raw data，点击next，确认地址是0x0C000000，为32bit，swap没有勾选，点击finish。  </li>\n<li>console窗口输出successfully时，terminate debug。确保bootmode管脚为I2C post boot,按下REST_FULL按钮,可以在串口中看到如下数据：<br><div align=\"center\"><img src=\"/2018/07/03/Boot-Singlecore/post_result.png\" height=\"400px\" width=\"600px\" alt=\"img\"></div><br>说明一下烧写程序的工作（包括EEPROM，NAND，NOR烧写程序），我们在CCS中的Memory Browser窗口将程序烧写到DDR内存中，另外烧写程序读取硬盘bin目录下（*input.txt中指定的文件）的程序文件，并解析该文件是否符合要求。若符合则直接将在DDR内存中文件烧写到指定内存（EEPROM，NAND，NOR）中。</li>\n</ol>\n</blockquote>\n<h3 id=\"RBL直接读取EEPROM程序\"><a href=\"#RBL直接读取EEPROM程序\" class=\"headerlink\" title=\"RBL直接读取EEPROM程序\"></a>RBL直接读取EEPROM程序</h3><p>　　根据实验结果以及<a href=\"https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/388490?Can-c6678-be-booted-from-directly-i2c-eeprom-\" target=\"_blank\" rel=\"noopener\">搜索结果</a>，程序文件只能烧到0x50对应的64KB中并且启动执行，而0x51对应的EEPROM只是保留给IBL启动程序的。 RBL对读取的程序文件格式有一定的要求，生成的.out文件需要经过工具链的处理。相应的处理流程和SPI nor flash boot 一样，这个留在后面叙述。<br>　　由于程序是烧在0x50处，因而流程和POST是一致的，启动时开关设置也一致。我烧写的是Led_play例程，能够成功运行。  </p>\n<h2 id=\"2-IBL-NAND-NOR-FLASH-BOOT\"><a href=\"#2-IBL-NAND-NOR-FLASH-BOOT\" class=\"headerlink\" title=\"2. IBL NAND|NOR FLASH BOOT\"></a>2. IBL NAND|NOR FLASH BOOT</h2><p>　　由于EPPROM大小只有128kB（64kB可用于用户程序），当用户程序文件较大时，就需要将文件放在FLASH中，此时一种可选的方法就是通过二级引导程序（IBL）来将FLASH中的文件搬运到RAM中运行，而IBL文件就是放在EEPROM中的。另外由于NAND FLASH的特点（不支持随机读取，读取时是一块一块的），因而不能直接在NAND FLASH上运行代码。因此RBL也不支持直接的NAND FLASH BOOT。<br>　　将IBL烧写到EEPROM中的操作和上面类似，但是需要将bus_addr设置为0x51，烧写文件为i2crom_0x51_c6678_le.bin，同时在烧写完成后需要配置boot param table。具体操作如下：</p>\n<blockquote>\n<ol>\n<li>打开 mcsdk &gt;tools &gt;boot_loader &gt;ibl &gt;src &gt;make &gt;bin &gt;i2cConfig.gel,找到setConfig_c6678_main函数，将<br>ibl.bootModes[0].u.norBoot.bootFormat    = ibl_BOOT_FORMAT_BBLOB;　　　　　改写为<br>ibl.bootModes[0].u.norBoot.bootFormat    = ibl_BOOT_FORMAT_ELF;<br>其中BBLOB表示二进制文件即.bin，而ELF文件指生成的.out文件，这样修改后烧写时load memory操作就可以使用生成的.out文件，更加方便，不用利用工具链转换成.bin。缺点就是.out文件中包含比较多无用的数据，文件较大。  </li>\n<li>接着连接开发板，将mcsdk &gt;tools &gt;boot_loader &gt;ibl &gt;src &gt;make &gt;bin &gt;i2cparam_0x51_c6678_le_0x500.out load 到core0，并执行。同时执行load gel操作，将上面修改的gel文件load进来。注意前面evmc6678.gel还是要load。然后 scripts &gt;EVM c6678 IBL &gt;setConfig_c6678_main。等待几秒钟，在console窗口中按回车健，看到I2c table write complete 表示写启动参数表成功了。<br>tips：在第二步中，需要先resume即先执行程序，然后执行gel文件的setConfig_c6678_main，不然会显示出错。  </li>\n<li>这样IBL就烧写好了，以后如果没有需要修改boot param的话，就不用在执行这个过程了。  </li>\n<li>接着需要将自己的程序烧写到NOR FLASH中，具体步骤可以查看mcsdk &gt;tools &gt;writer &gt;nor &gt;docs &gt;readme.txt。与烧写EEPROM类似，主要差别就是memory browser处地址为0x80000000。</li>\n<li>按照IBL NOR BOOT设置开关，重启，可以发现程序跑起来了~_~。  </li>\n</ol>\n</blockquote>\n<h2 id=\"3-SPI-NOR-FLASH-BOOT\"><a href=\"#3-SPI-NOR-FLASH-BOOT\" class=\"headerlink\" title=\"3. SPI NOR FLASH BOOT\"></a>3. SPI NOR FLASH BOOT</h2><p>　　evmc6678l也可直由RBL引导，从NOR FLASH处启动。RBL只能识别boot table format，而且只能使用大端模式。因此我们主要的工作是将生成的.out文件经过工具链进行处理，转换为能够被RBL识别的文件格式。此处的资料来源主要是<a href=\"https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/447109?C6678-multicore-booting-from-SPI-Nor-flash\" target=\"_blank\" rel=\"noopener\">TI论坛</a>。文档为<em>Booting from the SPI NOR on C6670/C6678 EVM</em>。<a href=\"https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=7&amp;ved=0ahUKEwjLroyPy4TcAhVDa94KHWJ-BFkQFghNMAY&amp;url=%68%74%74%70%3a%2f%2f%77%77%77%2e%64%65%79%69%73%75%70%70%6f%72%74%2e%63%6f%6d%2f%63%66%73%2d%66%69%6c%65%2e%61%73%68%78%2f%5f%5f%6b%65%79%2f%63%6f%6d%6d%75%6e%69%74%79%73%65%72%76%65%72%2d%64%69%73%63%75%73%73%69%6f%6e%73%2d%63%6f%6d%70%6f%6e%65%6e%74%73%2d%66%69%6c%65%73%2f%35%33%2f%33%36%31%37%2e%4b%65%79%73%74%6f%6e%65%2d%31%2d%53%50%49%2d%4e%4f%52%2d%5f%32%46%35%34%41%38%35%32%36%35%36%42%41%34%39%41%45%35%34%45%43%41%35%33%45%38%36%43%30%46%36%31%38%42%34%45%37%39%39%38%5f%2e%70%64%66&amp;usg=AOvVaw1QyyLgyoSvds9ox4LGi3lZ\" target=\"_blank\" rel=\"noopener\">更新资料</a>  </p>\n<h4 id=\"hex6x-exe\"><a href=\"#hex6x-exe\" class=\"headerlink\" title=\"hex6x.exe\"></a>hex6x.exe</h4><p>　　这个工具的主要作用是将.out转换为Boot table format,使得RBL能够读取到程序二进制文件的各个段。该工具的输入是一个.rmd文件。包括以下部分：</p>\n<blockquote>\n<p>C:\\Users\\DarkLing\\Desktop\\KeystoneI_bootloader_workshop\\boot_image\\SPI_Bootloader\\led_play.out<br>-a<br>-boot<br>-e _c_int00  </p>\n<p>ROMS<br>{<br>   ROM1:  org = 0x0C000000, length = 0x100000, memwidth = 32, romwidth = 32<br>   files = { C:\\Users\\DarkLing\\Desktop\\led_test\\led_play.btbl&gt;}<br>}  </p>\n</blockquote>\n<p>　　创建.rmd文件后执行命令:  </p>\n<blockquote>\n<p>.\\hex6x.exe .\\led_play.rmd  </p>\n</blockquote>\n<p>　　生成了led_play.btbl文件。boot table format如下所示：</p>\n<div align=\"center\"><img src=\"/2018/07/03/Boot-Singlecore/boot_table_format.png\" height=\"500px\" width=\"450px\" alt=\"img\"></div>\n\n<h4 id=\"b2i2c-exe\"><a href=\"#b2i2c-exe\" class=\"headerlink\" title=\"b2i2c.exe\"></a>b2i2c.exe</h4><p>　　将.btbl文件以0x80字节分块，并附加长度和校验和信息，以符合RBL的需要。  </p>\n<blockquote>\n<p>.\\b2i2c.exe .\\led_play.btbl .\\led_play.i2c</p>\n</blockquote>\n<p>　　生成led_play.i2c</p>\n<h4 id=\"b2ccs-exe\"><a href=\"#b2ccs-exe\" class=\"headerlink\" title=\"b2ccs.exe\"></a>b2ccs.exe</h4><p>　　将.i2c转为CCS能够接收的格式。</p>\n<blockquote>\n<p>.\\b2ccs .\\led_play.i2c .\\led_play.ccs  </p>\n</blockquote>\n<p>　　生成led_play.ccs  </p>\n<h4 id=\"romparse-exe\"><a href=\"#romparse-exe\" class=\"headerlink\" title=\"romparse.exe\"></a>romparse.exe</h4><p>　　将boot table 和boot parameter table 结合，需要有.map文件作为输入:</p>\n<blockquote>\n<p>section {<br>boot_mode = 50<br>param_index = 0<br>options = 1<br>core_freq_mhz = 1000<br>exe_file = “led_play.ccs”<br>next_dev_addr_ext = 0x0<br>sw_pll_prediv = 5<br>sw_pll_mult = 32<br>sw_pll_postdiv = 2<br>sw_pll_flags = 1<br>addr_width = 24<br>n_pins = 4<br>csel = 0<br>mode = 0<br>c2t_delay = 0<br>bus_freq_mhz = 0<br>bus_freq_khz = 500<br>}</p>\n</blockquote>\n<blockquote>\n<p>.\\romparse.exe .\\nysh.spi.map</p>\n</blockquote>\n<p>　　生成i2crom.ccs.修改生成的i2crom.ccs将第九行的51改为00。这个是I2c的地址,需要改为00，<a href=\"https://e2echina.ti.com/question_answer/dsp_arm/c6000_multicore/f/53/p/136365/382193#382193\" target=\"_blank\" rel=\"noopener\">原因未知</a>。个人理解是，由于是使用SPI连接flash启动，不需要I2c，而0x51则是使用EEPROM作二级引导使用的，因而需要设置为0，表示不使用。  </p>\n<h4 id=\"byteswapccs-exe\"><a href=\"#byteswapccs-exe\" class=\"headerlink\" title=\"byteswapccs.exe\"></a>byteswapccs.exe</h4><p>　　将小端文件转为大端。</p>\n<blockquote>\n<p>.\\byteswapccs.exe .\\i2crom.ccs .\\app.dat</p>\n</blockquote>\n<p>　　生成的app.dat文件可以通过nor writer烧写到nor flash中。<br>tips：<br>　　注意到此时生成的是app.dat文件，也可以通过ccs2bin.exe将i2crom.ccs转为.bin文件：</p>\n<blockquote>\n<p>.\\ccs2bin.exe  -swap .\\i2rom.ccs .\\app.bin  </p>\n</blockquote>\n<p>　　ccs2bin.exe可以使用-swap参数表示大小端转换。 </p>\n<p>但是操作文档中说到:<br>The EVM uses 24 bit NOR connected on CHIP select 0. While flashing using the NOR writer use the .dat as is and don’t convert the .dat into a bin file.<br>实际操作时，发现app.bin文件烧写时如果开关不是no boot mode 烧写后无法启动。而app.dat文件则不存在这个问题。</p>"},{"title":"boot_multicore","date":"2018-07-08T16:15:40.000Z","_content":"## 利用MAD工具实现多核启动\n　　先总体地说一下MAD工具的作用：对于多个DSP核心，可能我们有对应的多个project，生成了多个.out文件，我们想把不同的projecct放在不同的core上运行。调试的时候我们可以通过仿真器手动把代码文件load到对应core上让它运行，但是怎么让板子在启动的时候自动加载代码到各个core上，这就是MAD工具解决的问题。除此之外，这个工具还能通过共享一部分代码文件达到节约内存的目的。\n<!--more-->\n### MAD（Multicore Application Deployment） 工具\n　　MAD工具主要包括两个部分：MAP Tools，MAD Loader。其中MAP Tools主要是在构建镜像文件时使用（.bin，Build Time Utility），MAD Loader主要是在板子上电启动之后，负责将镜像文件搬到各个core的内存上，并让各个core从起始代码段开始执行。  \n　　同时，MAD工具还有两种使用模式：Prelinker-bypass， Prelinker。Prelinker-bypass模式下，MAP Tools不会为应用程序的各个段分配内存，也不会进行地址绑定（调用prelinker），这同时也就要求我们已经提前将这些工作做好了。Prelinker模式下，则相反，会通过deploy.json配置文件进行相关的配置。\n\n  <div align=center><img src=\"boot-multicore/boot_multicore_madprocedure.png\" height=400px width=600px alt=\"img\" /></div>  \n  \n　　[具体介绍](http://processors.wiki.ti.com/index.php/MAD_Utils_User_Guide)。\n　　\n### image_processing 例程  \n　　该例程位于mcsdk >demos >image_processing >utils >mad >evmc6678l下。默认在images目录下，已经有生成好的mcip-plbp-c6678-le.bin文件了，可以直接使用该文件，将其烧写到nor flash上，并进行一定的配置（后述），便可以在板子上跑起来该多核例程。效果如下：\n<div align=center><img src=\"boot-multicore/multi_image_html.png\" height=400px width=600px alt=\"img\" /></div>  \n　　由于该例程使用网线完成图片的传输，因而需要像之前的HUA例程一样进行配置，之前我使用的是静态IP方式，这次使用DHCP方式，该方式需要将板子的网线接到路由器，由路由器的DHCP server来给板子分配IP，板子启动时com4的界面如下：  \n<div align=center><img src=\"boot-multicore/boot_multicore_image_com4.png\" height=400px width=350px alt=\"img\" /></div>  \n　　上图中的IP地址即为板子的IP，可以在浏览器中通过该IP访问到第一个图的网页。  \n　　这个例程的功能就是，对图片（只支持bmp图片，可以将图片在画图中打开，另存为bmp图片）进行边缘检测处理,可以选择使用几个dsp核心对图片进行处理，可以看到使用的core越多，速度越快，处理结果（效果似乎一般）及对比如下：  \n<div align=center><img src=\"boot-multicore/boot_multicore_image_result.png\" height=450px width=600px alt=\"img\" /></div>  \n<div align=center><img src=\"boot-multicore/multi_image_8cores.png\" height=350px width=450px alt=\"img\" /></div>  \n<div align=center><img src=\"boot-multicore/multi_image_1core.png\" height=350px width=450px alt=\"img\" /></div>  \n\n　　下面说一下利用该目录下，config-files目录下的配置文件，使用MAP Tools工具重新生成mcip-plbp-c6678-le.bin的流程.  \n> windows环境中需要安装mingw、python和Msys（模拟GNU环境）这个步骤另开blog记录吧。  \n> 修改build_mad_image.bat自动生成脚本,如下根据自己的编译器地址修改目录  \n\n```\n@set PATH=\"C:\\ti\\ccsv8\\tools\\compiler\\c6000_7.4.23\\bin\";%PATH%\n\n@rd /s /q tmp\n\npython2 ..\\..\\..\\..\\..\\tools\\boot_loader\\mad-utils\\map-tool\\maptool.py config-files\\maptoolCfg_evmc6678l.json\n\n```\n\n> 修改maptoolCfg_evmc6678l.json配置文件  \n\n```JavaScript\n{\n    \"deploymentCfgFile\"     : \"config-files/deployment_template_evmc6678l.json\",\n    \"LoadImageName\"         : \"mcip-c6678-le.bin\",\n    \"prelinkExe\"            : \"prelink6x\",\n    \"stripExe\"              : \"strip6x\",\n    \"ofdTool\"               : \"ofd6x\",\n    \"malApp\"                : \"../../../../../tools/boot_loader/mad-utils/mad-loader/bin/C6678/le/mal_app.exe\",\n    \"nmlLoader\"             : \"../../../../../tools/boot_loader/mad-utils/mad-loader/bin/C6678/le/nml.exe\"\n}\n\n```\n> 修改deployment_template_evmc6678l.json文件,注意原文件中，L2SRAM段中的secnamepat中缺少了\"nimu_eth_ll2\"，不加上会报错。\n\n```JavaScript\n{\n\t\"deviceName\" : \"C6678\",\n\t\n\t\"partitions\" : [\n\t\t{\n\t\t\t\"name\"\t\t: \"DDR3-ROMFS\",\n\t\t\t\"vaddr\"\t\t:  \"0x9e000000\",\n\t\t\t\"paddr\"\t\t: [ \"0x81e000000\", \"0x81e000000\", \"0x81e000000\", \"0x81e000000\", \"0x81e000000\", \"0x81e000000\", \"0x81e000000\", \"0x81e000000\"] ,\n\t\t\t\"size\"\t\t: \"0x1000000\",\n\t\t\t\"secNamePat\"  \t: [\"text\", \"const\"],\n\t\t\t\"cores\"\t\t: [0,1,2,3,4,5,6,7],\n\t\t\t\"permissions\"\t: [\"UR\", \"UX\", \"SR\", \"SX\"],  \n\t\t\t\"cacheEnable\"\t: true,\n\t\t\t\"prefetch\"      : true,\n\t\t\t\"priority\"\t: 0,\n\t\t\t\"shared\"\t: true,\n\t\t\t\"loadPartition\" : true \n\t\t},\n\t\t{\n\t\t\t\"name\"\t\t: \"DDR3-HEAP\",\n\t\t\t\"vaddr\"\t\t:  \"0x88000000\",\n\t\t\t\"paddr\"\t\t: [\"0x808000000\"] ,\n\t\t\t\"size\"\t\t: \"0x8000000\",\n\t\t\t\"secNamePat\"  \t: [\"systemHeapMaster\"],\n\t\t\t\"cores\"\t\t: [0],\n\t\t\t\"permissions\"\t: [\"UR\", \"UW\", \"SR\", \"SW\"],  \n\t\t\t\"cacheEnable\"\t: true,\n\t\t\t\"prefetch\"      : true,\n\t\t\t\"priority\"\t: 0,\n\t\t\t\"shared\"\t: true\n\t\t},\n\t\t{\n\t\t\t\"name\"\t\t: \"DDR3-DATA\",\n\t\t\t\"vaddr\"\t\t:  \"0x82000000\",\n\t\t\t\"paddr\"\t\t: [\"0x802000000\"] ,\n\t\t\t\"size\"\t\t: \"0x1000000\",\n\t\t\t\"secNamePat\"  \t: [\"WEBDATA\"],\n\t\t\t\"cores\"\t\t: [0],\n\t\t\t\"permissions\"\t: [\"UR\", \"UW\", \"SR\",\"SW\"],  \n\t\t\t\"cacheEnable\"\t: true,\n\t\t\t\"prefetch\"      : true,\n\t\t\t\"priority\"\t: 0,\n\t\t\t\"shared\"\t: true\n\t\t},\n\t\t{\n\t\t\t\"name\"\t\t: \"MSMCSRAM_MASTER\",\n\t\t\t\"vaddr\"\t\t: \"0xc000000\",\n\t\t\t\"paddr\"\t\t: [ \"0xc000000\"],\n\t\t\t\"size\"\t\t: \"0x100000\",\n\t\t\t\"secNamePat\"  \t: [ \"emacComm\", \"NDK_PACKETMEM\", \"NDK_OBJMEM\"],\n\t\t\t\"cores\"\t\t: [0],\n\t\t\t\"permissions\"\t: [\"UR\", \"UW\", \"UX\", \"SR\", \"SW\", \"SX\"],\n\t\t\t\"cacheEnable\"\t: true,\n\t\t\t\"prefetch\"      : true,\n\t\t\t\"priority\"\t: 0,\n\t\t\t\"shared\"\t: false\n\t\t},\n\t\t{\n\t\t\t\"name\"\t\t: \"L2SRAM\",\n\t\t\t\"vaddr\"\t\t: \"0x800000\",\n\t\t\t\"paddr\"\t\t: [ \"0x800000\", \"0x800000\", \"0x800000\", \"0x800000\", \"0x800000\", \"0x800000\", \"0x800000\", \"0x800000\" ],\n\t\t\t\"size\"\t\t: \"0x80000\",\n\t\t\t\"secNamePat\"  \t: [ \"resmgr\", \"cio\", \"args\", \"cppi\", \"qmss\", \"^\\\\.far\\\\.\", \"bss\", \"neardata\", \"rodata\", \"fardata\", \"defaultStackSection\", \"stack\", \"plt\", \"platform_lib\", \"vecs\", \"switch\",\"nimu_eth_ll2\"],\n\t\t\t\"cores\"\t\t: [0,1,2,3,4,5,6,7],\n\t\t\t\"permissions\"\t: [\"UR\", \"UW\", \"UX\", \"SR\", \"SW\", \"SX\"],\n\t\t\t\"cacheEnable\"\t: false,\n\t\t\t\"prefetch\"      : false,\n\t\t\t\"priority\"\t: 0,\n\t\t\t\"shared\"\t: false\n\t\t}\n    ],\n\t\n\t\"applications\" : [\n\t\t{\n\t\t\t\"name\"\t\t : \"master\",\n\t\t\t\"fileName\"       : \"../../../ipc/evmc6678l/master/Debug/image_processing_evmc6678l_master.out\",\n\t\t\t\"libPath\"        : \"../../../ipc/evmc6678l/master/Debug\",\n\t\t\t\"allowedCores\"   : [0]\n\t\t},\n\t\t{\n\t\t\t\"name\"\t\t : \"slave\",\n\t\t\t\"fileName\"       : \"../../../ipc/evmc6678l/slave/Debug/image_processing_evmc6678l_slave.out\",\n\t\t\t\"libPath\"        : \"../../../ipc/evmc6678l/slave/Debug\",\n\t\t\t\"allowedCores\"   : [1,2,3,4,5,6,7]\n\t\t}\n\t],\n\t\n\t\"appDeployment\" : [\n\t\t\"master\",\n\t\t\"slave\",\n\t\t\"slave\",\n\t\t\"slave\",\n\t\t\"slave\",\n\t\t\"slave\",\n\t\t\"slave\",\n\t\t\"slave\"\n\t]\n}\n\n\n```\n\n修改好后，再msys中输入： \n> cd /c/ti/mcsdk_2_01_02_06/demos/image_processing/utils/mad/evmc6678l/  \n> ./build_mad_image.bat  \n\n可以看到再images目录下生产了.bin文件。接下来需要将.bin文件烧写到nor flash中，由于我使用的是IBL NOR Flash启动方式，还需要对IBL进行一定的配置:\n> startAddress = 0x9e000000  \n> branchAddress = 0x9e001040\n\n按照之前配置IBL的方法将norflash中的上述部分修改成上面的地址。然后利用nor writer将.bin文件烧入nor flash。将网线连接到路由器，启动板子，可以看到上面的效果。\n\n\n## Led_play 例程\n　　除了上面的例程外，我还从网上下载了Led灯闪烁例程，并且自己修改成两个核上运行程序，但是由于例程中的一些问题，使得程序一直无法正常运行，后来查找到问题，修改后正常工作。  \n　　首先是将Led_play例程改成循环点亮改成单灯闪烁。\n```C\n    for (i = 0; i < length; i++) {\n        if (platform_uart_write(message[i]) != Platform_EOK) {\n            return;\n        }\n    }\n\n    for (i=0;i<p_info.led[PLATFORM_USER_LED_CLASS].count;i++)\n    {\n        platform_led(i, PLATFORM_LED_OFF, PLATFORM_USER_LED_CLASS);\n    }\n    while(1) {\n        platform_led(led_no, PLATFORM_LED_ON, PLATFORM_USER_LED_CLASS);\n        platform_delay(150000);\n        platform_led(led_no, PLATFORM_LED_OFF, PLATFORM_USER_LED_CLASS);\n        platform_delay(150000);\n        //led_no = (led_no) % p_info.led[PLATFORM_USER_LED_CLASS].count;\n    }\n```  \n\n　　接着，修改例程中导致程序无法在core0以外运行的错误:\n\n```C\n    //memset(&init_flags, 0x01, sizeof(platform_init_flags));  错误\n    memset(&init_flags, 0x00, sizeof(platform_init_flags));\n    memset(&init_config, 0, sizeof(platform_init_config));\n```  \n　　原来的初始化代码会导致将程序在load到core0以外的core时，会abort，无法运行。（因此我利用MAP生成的.bin一直无法正常工作，我还以为时MAP工具配置的问题，查找了很久，最后才发现~……~，一开始在core0正常运行了，就想当然地认为能正常在其它core上跑，事实证明不能想当然~_~）。\n\n\n## 补充\n### 预览生成的.bin文件执行效果\n\n　　生成的.bin文件可以在CSS中先测试是否能够正常使用。步骤如下：\n> 1. 连接core0，执行C6678L.gel初始化脚本。  \n> 2. 在memory browser中输入0x9E000000,Load memory，将.bin文件烧写进去。  \n> 3. 点击core0，在Register窗口中找到PC寄存器，将其值改为0x9E001040。  \n> 4. run >resume  \n\n　　这样可以看到多核程序正常跑起来。\n\n### 单镜像\n　　MAD方式可以将多个镜像连接成一个，并自动将数据加载到各个core指定的内存上，除了这个方法外，还可以将同一份代码同时加载到多个core的内存中，并通过代码判断当前的核心，从而执行不同的程序。但是具体还没实践过，留待实验。\n\n### MAD启动流程\n　　[参考一](https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/346728?Does-program-always-start-from-core-0-for-C6678-)  \n　　[参考二](https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/233429?Some-questiones-about-bootloader-in-C6678)  \n　　Rom bootloader会在所有的core上运行，但是执行不同的功能。在core0,会执行真正的boot loader；在core1，会执行一条idle指令，等待core0将其唤醒。  \n　　IBL存储在EEPROM上，有RBL启动执行，但是IBL只在core0上执行。  \n　　启动时RBL启动IBL并执行，IBL将NOR FLASH上的MAD image下载到DDR上，同时由上面配置IBL的步骤可以知道，接下来IBL会跳转到一个执行程序入口地址，在该配置下，就是MAD Loader。  \n　　MAD Loader的责任就是解析ROMFS image，将各个数据段加载到它们的执行地址，并在各个指定的core上启动程序的执行。（MAD Loader帮我们完成了唤醒其它core执行的任务）\n","source":"_posts/boot-multicore.md","raw":"---\ntitle: boot_multicore\ndate: 2018-07-09 00:15:40\ntags: evmc6678l\n---\n## 利用MAD工具实现多核启动\n　　先总体地说一下MAD工具的作用：对于多个DSP核心，可能我们有对应的多个project，生成了多个.out文件，我们想把不同的projecct放在不同的core上运行。调试的时候我们可以通过仿真器手动把代码文件load到对应core上让它运行，但是怎么让板子在启动的时候自动加载代码到各个core上，这就是MAD工具解决的问题。除此之外，这个工具还能通过共享一部分代码文件达到节约内存的目的。\n<!--more-->\n### MAD（Multicore Application Deployment） 工具\n　　MAD工具主要包括两个部分：MAP Tools，MAD Loader。其中MAP Tools主要是在构建镜像文件时使用（.bin，Build Time Utility），MAD Loader主要是在板子上电启动之后，负责将镜像文件搬到各个core的内存上，并让各个core从起始代码段开始执行。  \n　　同时，MAD工具还有两种使用模式：Prelinker-bypass， Prelinker。Prelinker-bypass模式下，MAP Tools不会为应用程序的各个段分配内存，也不会进行地址绑定（调用prelinker），这同时也就要求我们已经提前将这些工作做好了。Prelinker模式下，则相反，会通过deploy.json配置文件进行相关的配置。\n\n  <div align=center><img src=\"boot-multicore/boot_multicore_madprocedure.png\" height=400px width=600px alt=\"img\" /></div>  \n  \n　　[具体介绍](http://processors.wiki.ti.com/index.php/MAD_Utils_User_Guide)。\n　　\n### image_processing 例程  \n　　该例程位于mcsdk >demos >image_processing >utils >mad >evmc6678l下。默认在images目录下，已经有生成好的mcip-plbp-c6678-le.bin文件了，可以直接使用该文件，将其烧写到nor flash上，并进行一定的配置（后述），便可以在板子上跑起来该多核例程。效果如下：\n<div align=center><img src=\"boot-multicore/multi_image_html.png\" height=400px width=600px alt=\"img\" /></div>  \n　　由于该例程使用网线完成图片的传输，因而需要像之前的HUA例程一样进行配置，之前我使用的是静态IP方式，这次使用DHCP方式，该方式需要将板子的网线接到路由器，由路由器的DHCP server来给板子分配IP，板子启动时com4的界面如下：  \n<div align=center><img src=\"boot-multicore/boot_multicore_image_com4.png\" height=400px width=350px alt=\"img\" /></div>  \n　　上图中的IP地址即为板子的IP，可以在浏览器中通过该IP访问到第一个图的网页。  \n　　这个例程的功能就是，对图片（只支持bmp图片，可以将图片在画图中打开，另存为bmp图片）进行边缘检测处理,可以选择使用几个dsp核心对图片进行处理，可以看到使用的core越多，速度越快，处理结果（效果似乎一般）及对比如下：  \n<div align=center><img src=\"boot-multicore/boot_multicore_image_result.png\" height=450px width=600px alt=\"img\" /></div>  \n<div align=center><img src=\"boot-multicore/multi_image_8cores.png\" height=350px width=450px alt=\"img\" /></div>  \n<div align=center><img src=\"boot-multicore/multi_image_1core.png\" height=350px width=450px alt=\"img\" /></div>  \n\n　　下面说一下利用该目录下，config-files目录下的配置文件，使用MAP Tools工具重新生成mcip-plbp-c6678-le.bin的流程.  \n> windows环境中需要安装mingw、python和Msys（模拟GNU环境）这个步骤另开blog记录吧。  \n> 修改build_mad_image.bat自动生成脚本,如下根据自己的编译器地址修改目录  \n\n```\n@set PATH=\"C:\\ti\\ccsv8\\tools\\compiler\\c6000_7.4.23\\bin\";%PATH%\n\n@rd /s /q tmp\n\npython2 ..\\..\\..\\..\\..\\tools\\boot_loader\\mad-utils\\map-tool\\maptool.py config-files\\maptoolCfg_evmc6678l.json\n\n```\n\n> 修改maptoolCfg_evmc6678l.json配置文件  \n\n```JavaScript\n{\n    \"deploymentCfgFile\"     : \"config-files/deployment_template_evmc6678l.json\",\n    \"LoadImageName\"         : \"mcip-c6678-le.bin\",\n    \"prelinkExe\"            : \"prelink6x\",\n    \"stripExe\"              : \"strip6x\",\n    \"ofdTool\"               : \"ofd6x\",\n    \"malApp\"                : \"../../../../../tools/boot_loader/mad-utils/mad-loader/bin/C6678/le/mal_app.exe\",\n    \"nmlLoader\"             : \"../../../../../tools/boot_loader/mad-utils/mad-loader/bin/C6678/le/nml.exe\"\n}\n\n```\n> 修改deployment_template_evmc6678l.json文件,注意原文件中，L2SRAM段中的secnamepat中缺少了\"nimu_eth_ll2\"，不加上会报错。\n\n```JavaScript\n{\n\t\"deviceName\" : \"C6678\",\n\t\n\t\"partitions\" : [\n\t\t{\n\t\t\t\"name\"\t\t: \"DDR3-ROMFS\",\n\t\t\t\"vaddr\"\t\t:  \"0x9e000000\",\n\t\t\t\"paddr\"\t\t: [ \"0x81e000000\", \"0x81e000000\", \"0x81e000000\", \"0x81e000000\", \"0x81e000000\", \"0x81e000000\", \"0x81e000000\", \"0x81e000000\"] ,\n\t\t\t\"size\"\t\t: \"0x1000000\",\n\t\t\t\"secNamePat\"  \t: [\"text\", \"const\"],\n\t\t\t\"cores\"\t\t: [0,1,2,3,4,5,6,7],\n\t\t\t\"permissions\"\t: [\"UR\", \"UX\", \"SR\", \"SX\"],  \n\t\t\t\"cacheEnable\"\t: true,\n\t\t\t\"prefetch\"      : true,\n\t\t\t\"priority\"\t: 0,\n\t\t\t\"shared\"\t: true,\n\t\t\t\"loadPartition\" : true \n\t\t},\n\t\t{\n\t\t\t\"name\"\t\t: \"DDR3-HEAP\",\n\t\t\t\"vaddr\"\t\t:  \"0x88000000\",\n\t\t\t\"paddr\"\t\t: [\"0x808000000\"] ,\n\t\t\t\"size\"\t\t: \"0x8000000\",\n\t\t\t\"secNamePat\"  \t: [\"systemHeapMaster\"],\n\t\t\t\"cores\"\t\t: [0],\n\t\t\t\"permissions\"\t: [\"UR\", \"UW\", \"SR\", \"SW\"],  \n\t\t\t\"cacheEnable\"\t: true,\n\t\t\t\"prefetch\"      : true,\n\t\t\t\"priority\"\t: 0,\n\t\t\t\"shared\"\t: true\n\t\t},\n\t\t{\n\t\t\t\"name\"\t\t: \"DDR3-DATA\",\n\t\t\t\"vaddr\"\t\t:  \"0x82000000\",\n\t\t\t\"paddr\"\t\t: [\"0x802000000\"] ,\n\t\t\t\"size\"\t\t: \"0x1000000\",\n\t\t\t\"secNamePat\"  \t: [\"WEBDATA\"],\n\t\t\t\"cores\"\t\t: [0],\n\t\t\t\"permissions\"\t: [\"UR\", \"UW\", \"SR\",\"SW\"],  \n\t\t\t\"cacheEnable\"\t: true,\n\t\t\t\"prefetch\"      : true,\n\t\t\t\"priority\"\t: 0,\n\t\t\t\"shared\"\t: true\n\t\t},\n\t\t{\n\t\t\t\"name\"\t\t: \"MSMCSRAM_MASTER\",\n\t\t\t\"vaddr\"\t\t: \"0xc000000\",\n\t\t\t\"paddr\"\t\t: [ \"0xc000000\"],\n\t\t\t\"size\"\t\t: \"0x100000\",\n\t\t\t\"secNamePat\"  \t: [ \"emacComm\", \"NDK_PACKETMEM\", \"NDK_OBJMEM\"],\n\t\t\t\"cores\"\t\t: [0],\n\t\t\t\"permissions\"\t: [\"UR\", \"UW\", \"UX\", \"SR\", \"SW\", \"SX\"],\n\t\t\t\"cacheEnable\"\t: true,\n\t\t\t\"prefetch\"      : true,\n\t\t\t\"priority\"\t: 0,\n\t\t\t\"shared\"\t: false\n\t\t},\n\t\t{\n\t\t\t\"name\"\t\t: \"L2SRAM\",\n\t\t\t\"vaddr\"\t\t: \"0x800000\",\n\t\t\t\"paddr\"\t\t: [ \"0x800000\", \"0x800000\", \"0x800000\", \"0x800000\", \"0x800000\", \"0x800000\", \"0x800000\", \"0x800000\" ],\n\t\t\t\"size\"\t\t: \"0x80000\",\n\t\t\t\"secNamePat\"  \t: [ \"resmgr\", \"cio\", \"args\", \"cppi\", \"qmss\", \"^\\\\.far\\\\.\", \"bss\", \"neardata\", \"rodata\", \"fardata\", \"defaultStackSection\", \"stack\", \"plt\", \"platform_lib\", \"vecs\", \"switch\",\"nimu_eth_ll2\"],\n\t\t\t\"cores\"\t\t: [0,1,2,3,4,5,6,7],\n\t\t\t\"permissions\"\t: [\"UR\", \"UW\", \"UX\", \"SR\", \"SW\", \"SX\"],\n\t\t\t\"cacheEnable\"\t: false,\n\t\t\t\"prefetch\"      : false,\n\t\t\t\"priority\"\t: 0,\n\t\t\t\"shared\"\t: false\n\t\t}\n    ],\n\t\n\t\"applications\" : [\n\t\t{\n\t\t\t\"name\"\t\t : \"master\",\n\t\t\t\"fileName\"       : \"../../../ipc/evmc6678l/master/Debug/image_processing_evmc6678l_master.out\",\n\t\t\t\"libPath\"        : \"../../../ipc/evmc6678l/master/Debug\",\n\t\t\t\"allowedCores\"   : [0]\n\t\t},\n\t\t{\n\t\t\t\"name\"\t\t : \"slave\",\n\t\t\t\"fileName\"       : \"../../../ipc/evmc6678l/slave/Debug/image_processing_evmc6678l_slave.out\",\n\t\t\t\"libPath\"        : \"../../../ipc/evmc6678l/slave/Debug\",\n\t\t\t\"allowedCores\"   : [1,2,3,4,5,6,7]\n\t\t}\n\t],\n\t\n\t\"appDeployment\" : [\n\t\t\"master\",\n\t\t\"slave\",\n\t\t\"slave\",\n\t\t\"slave\",\n\t\t\"slave\",\n\t\t\"slave\",\n\t\t\"slave\",\n\t\t\"slave\"\n\t]\n}\n\n\n```\n\n修改好后，再msys中输入： \n> cd /c/ti/mcsdk_2_01_02_06/demos/image_processing/utils/mad/evmc6678l/  \n> ./build_mad_image.bat  \n\n可以看到再images目录下生产了.bin文件。接下来需要将.bin文件烧写到nor flash中，由于我使用的是IBL NOR Flash启动方式，还需要对IBL进行一定的配置:\n> startAddress = 0x9e000000  \n> branchAddress = 0x9e001040\n\n按照之前配置IBL的方法将norflash中的上述部分修改成上面的地址。然后利用nor writer将.bin文件烧入nor flash。将网线连接到路由器，启动板子，可以看到上面的效果。\n\n\n## Led_play 例程\n　　除了上面的例程外，我还从网上下载了Led灯闪烁例程，并且自己修改成两个核上运行程序，但是由于例程中的一些问题，使得程序一直无法正常运行，后来查找到问题，修改后正常工作。  \n　　首先是将Led_play例程改成循环点亮改成单灯闪烁。\n```C\n    for (i = 0; i < length; i++) {\n        if (platform_uart_write(message[i]) != Platform_EOK) {\n            return;\n        }\n    }\n\n    for (i=0;i<p_info.led[PLATFORM_USER_LED_CLASS].count;i++)\n    {\n        platform_led(i, PLATFORM_LED_OFF, PLATFORM_USER_LED_CLASS);\n    }\n    while(1) {\n        platform_led(led_no, PLATFORM_LED_ON, PLATFORM_USER_LED_CLASS);\n        platform_delay(150000);\n        platform_led(led_no, PLATFORM_LED_OFF, PLATFORM_USER_LED_CLASS);\n        platform_delay(150000);\n        //led_no = (led_no) % p_info.led[PLATFORM_USER_LED_CLASS].count;\n    }\n```  \n\n　　接着，修改例程中导致程序无法在core0以外运行的错误:\n\n```C\n    //memset(&init_flags, 0x01, sizeof(platform_init_flags));  错误\n    memset(&init_flags, 0x00, sizeof(platform_init_flags));\n    memset(&init_config, 0, sizeof(platform_init_config));\n```  \n　　原来的初始化代码会导致将程序在load到core0以外的core时，会abort，无法运行。（因此我利用MAP生成的.bin一直无法正常工作，我还以为时MAP工具配置的问题，查找了很久，最后才发现~……~，一开始在core0正常运行了，就想当然地认为能正常在其它core上跑，事实证明不能想当然~_~）。\n\n\n## 补充\n### 预览生成的.bin文件执行效果\n\n　　生成的.bin文件可以在CSS中先测试是否能够正常使用。步骤如下：\n> 1. 连接core0，执行C6678L.gel初始化脚本。  \n> 2. 在memory browser中输入0x9E000000,Load memory，将.bin文件烧写进去。  \n> 3. 点击core0，在Register窗口中找到PC寄存器，将其值改为0x9E001040。  \n> 4. run >resume  \n\n　　这样可以看到多核程序正常跑起来。\n\n### 单镜像\n　　MAD方式可以将多个镜像连接成一个，并自动将数据加载到各个core指定的内存上，除了这个方法外，还可以将同一份代码同时加载到多个core的内存中，并通过代码判断当前的核心，从而执行不同的程序。但是具体还没实践过，留待实验。\n\n### MAD启动流程\n　　[参考一](https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/346728?Does-program-always-start-from-core-0-for-C6678-)  \n　　[参考二](https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/233429?Some-questiones-about-bootloader-in-C6678)  \n　　Rom bootloader会在所有的core上运行，但是执行不同的功能。在core0,会执行真正的boot loader；在core1，会执行一条idle指令，等待core0将其唤醒。  \n　　IBL存储在EEPROM上，有RBL启动执行，但是IBL只在core0上执行。  \n　　启动时RBL启动IBL并执行，IBL将NOR FLASH上的MAD image下载到DDR上，同时由上面配置IBL的步骤可以知道，接下来IBL会跳转到一个执行程序入口地址，在该配置下，就是MAD Loader。  \n　　MAD Loader的责任就是解析ROMFS image，将各个数据段加载到它们的执行地址，并在各个指定的core上启动程序的执行。（MAD Loader帮我们完成了唤醒其它core执行的任务）\n","slug":"boot-multicore","published":1,"updated":"2018-07-08T16:28:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjohyvia000dhfzywaow5fzo","content":"<h2 id=\"利用MAD工具实现多核启动\"><a href=\"#利用MAD工具实现多核启动\" class=\"headerlink\" title=\"利用MAD工具实现多核启动\"></a>利用MAD工具实现多核启动</h2><p>　　先总体地说一下MAD工具的作用：对于多个DSP核心，可能我们有对应的多个project，生成了多个.out文件，我们想把不同的projecct放在不同的core上运行。调试的时候我们可以通过仿真器手动把代码文件load到对应core上让它运行，但是怎么让板子在启动的时候自动加载代码到各个core上，这就是MAD工具解决的问题。除此之外，这个工具还能通过共享一部分代码文件达到节约内存的目的。<br><a id=\"more\"></a></p>\n<h3 id=\"MAD（Multicore-Application-Deployment）-工具\"><a href=\"#MAD（Multicore-Application-Deployment）-工具\" class=\"headerlink\" title=\"MAD（Multicore Application Deployment） 工具\"></a>MAD（Multicore Application Deployment） 工具</h3><p>　　MAD工具主要包括两个部分：MAP Tools，MAD Loader。其中MAP Tools主要是在构建镜像文件时使用（.bin，Build Time Utility），MAD Loader主要是在板子上电启动之后，负责将镜像文件搬到各个core的内存上，并让各个core从起始代码段开始执行。<br>　　同时，MAD工具还有两种使用模式：Prelinker-bypass， Prelinker。Prelinker-bypass模式下，MAP Tools不会为应用程序的各个段分配内存，也不会进行地址绑定（调用prelinker），这同时也就要求我们已经提前将这些工作做好了。Prelinker模式下，则相反，会通过deploy.json配置文件进行相关的配置。</p>\n  <div align=\"center\"><img src=\"/2018/07/09/boot-multicore/boot_multicore_madprocedure.png\" height=\"400px\" width=\"600px\" alt=\"img\"></div>  \n\n<p>　　<a href=\"http://processors.wiki.ti.com/index.php/MAD_Utils_User_Guide\" target=\"_blank\" rel=\"noopener\">具体介绍</a>。\n　　</p>\n<h3 id=\"image-processing-例程\"><a href=\"#image-processing-例程\" class=\"headerlink\" title=\"image_processing 例程\"></a>image_processing 例程</h3><p>　　该例程位于mcsdk &gt;demos &gt;image_processing &gt;utils &gt;mad &gt;evmc6678l下。默认在images目录下，已经有生成好的mcip-plbp-c6678-le.bin文件了，可以直接使用该文件，将其烧写到nor flash上，并进行一定的配置（后述），便可以在板子上跑起来该多核例程。效果如下：</p>\n<div align=\"center\"><img src=\"/2018/07/09/boot-multicore/multi_image_html.png\" height=\"400px\" width=\"600px\" alt=\"img\"></div><br>　　由于该例程使用网线完成图片的传输，因而需要像之前的HUA例程一样进行配置，之前我使用的是静态IP方式，这次使用DHCP方式，该方式需要将板子的网线接到路由器，由路由器的DHCP server来给板子分配IP，板子启动时com4的界面如下：<br><div align=\"center\"><img src=\"/2018/07/09/boot-multicore/boot_multicore_image_com4.png\" height=\"400px\" width=\"350px\" alt=\"img\"></div><br>　　上图中的IP地址即为板子的IP，可以在浏览器中通过该IP访问到第一个图的网页。<br>　　这个例程的功能就是，对图片（只支持bmp图片，可以将图片在画图中打开，另存为bmp图片）进行边缘检测处理,可以选择使用几个dsp核心对图片进行处理，可以看到使用的core越多，速度越快，处理结果（效果似乎一般）及对比如下：<br><div align=\"center\"><img src=\"/2018/07/09/boot-multicore/boot_multicore_image_result.png\" height=\"450px\" width=\"600px\" alt=\"img\"></div><br><div align=\"center\"><img src=\"/2018/07/09/boot-multicore/multi_image_8cores.png\" height=\"350px\" width=\"450px\" alt=\"img\"></div><br><div align=\"center\"><img src=\"/2018/07/09/boot-multicore/multi_image_1core.png\" height=\"350px\" width=\"450px\" alt=\"img\"></div>  \n\n<p>　　下面说一下利用该目录下，config-files目录下的配置文件，使用MAP Tools工具重新生成mcip-plbp-c6678-le.bin的流程.  </p>\n<blockquote>\n<p>windows环境中需要安装mingw、python和Msys（模拟GNU环境）这个步骤另开blog记录吧。<br>修改build_mad_image.bat自动生成脚本,如下根据自己的编译器地址修改目录  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@set PATH=&quot;C:\\ti\\ccsv8\\tools\\compiler\\c6000_7.4.23\\bin&quot;;%PATH%</span><br><span class=\"line\"></span><br><span class=\"line\">@rd /s /q tmp</span><br><span class=\"line\"></span><br><span class=\"line\">python2 ..\\..\\..\\..\\..\\tools\\boot_loader\\mad-utils\\map-tool\\maptool.py config-files\\maptoolCfg_evmc6678l.json</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>修改maptoolCfg_evmc6678l.json配置文件  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"deploymentCfgFile\"</span>     : <span class=\"string\">\"config-files/deployment_template_evmc6678l.json\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"LoadImageName\"</span>         : <span class=\"string\">\"mcip-c6678-le.bin\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"prelinkExe\"</span>            : <span class=\"string\">\"prelink6x\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"stripExe\"</span>              : <span class=\"string\">\"strip6x\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ofdTool\"</span>               : <span class=\"string\">\"ofd6x\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"malApp\"</span>                : <span class=\"string\">\"../../../../../tools/boot_loader/mad-utils/mad-loader/bin/C6678/le/mal_app.exe\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"nmlLoader\"</span>             : <span class=\"string\">\"../../../../../tools/boot_loader/mad-utils/mad-loader/bin/C6678/le/nml.exe\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>修改deployment_template_evmc6678l.json文件,注意原文件中，L2SRAM段中的secnamepat中缺少了”nimu_eth_ll2”，不加上会报错。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"deviceName\"</span> : <span class=\"string\">\"C6678\"</span>,</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"string\">\"partitions\"</span> : [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"name\"</span>\t\t: <span class=\"string\">\"DDR3-ROMFS\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"vaddr\"</span>\t\t:  <span class=\"string\">\"0x9e000000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"paddr\"</span>\t\t: [ <span class=\"string\">\"0x81e000000\"</span>, <span class=\"string\">\"0x81e000000\"</span>, <span class=\"string\">\"0x81e000000\"</span>, <span class=\"string\">\"0x81e000000\"</span>, <span class=\"string\">\"0x81e000000\"</span>, <span class=\"string\">\"0x81e000000\"</span>, <span class=\"string\">\"0x81e000000\"</span>, <span class=\"string\">\"0x81e000000\"</span>] ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"size\"</span>\t\t: <span class=\"string\">\"0x1000000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"secNamePat\"</span>  \t: [<span class=\"string\">\"text\"</span>, <span class=\"string\">\"const\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cores\"</span>\t\t: [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"permissions\"</span>\t: [<span class=\"string\">\"UR\"</span>, <span class=\"string\">\"UX\"</span>, <span class=\"string\">\"SR\"</span>, <span class=\"string\">\"SX\"</span>],  </span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cacheEnable\"</span>\t: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"prefetch\"</span>      : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"priority\"</span>\t: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"shared\"</span>\t: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"loadPartition\"</span> : <span class=\"literal\">true</span> </span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"name\"</span>\t\t: <span class=\"string\">\"DDR3-HEAP\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"vaddr\"</span>\t\t:  <span class=\"string\">\"0x88000000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"paddr\"</span>\t\t: [<span class=\"string\">\"0x808000000\"</span>] ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"size\"</span>\t\t: <span class=\"string\">\"0x8000000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"secNamePat\"</span>  \t: [<span class=\"string\">\"systemHeapMaster\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cores\"</span>\t\t: [<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"permissions\"</span>\t: [<span class=\"string\">\"UR\"</span>, <span class=\"string\">\"UW\"</span>, <span class=\"string\">\"SR\"</span>, <span class=\"string\">\"SW\"</span>],  </span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cacheEnable\"</span>\t: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"prefetch\"</span>      : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"priority\"</span>\t: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"shared\"</span>\t: <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"name\"</span>\t\t: <span class=\"string\">\"DDR3-DATA\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"vaddr\"</span>\t\t:  <span class=\"string\">\"0x82000000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"paddr\"</span>\t\t: [<span class=\"string\">\"0x802000000\"</span>] ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"size\"</span>\t\t: <span class=\"string\">\"0x1000000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"secNamePat\"</span>  \t: [<span class=\"string\">\"WEBDATA\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cores\"</span>\t\t: [<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"permissions\"</span>\t: [<span class=\"string\">\"UR\"</span>, <span class=\"string\">\"UW\"</span>, <span class=\"string\">\"SR\"</span>,<span class=\"string\">\"SW\"</span>],  </span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cacheEnable\"</span>\t: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"prefetch\"</span>      : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"priority\"</span>\t: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"shared\"</span>\t: <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"name\"</span>\t\t: <span class=\"string\">\"MSMCSRAM_MASTER\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"vaddr\"</span>\t\t: <span class=\"string\">\"0xc000000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"paddr\"</span>\t\t: [ <span class=\"string\">\"0xc000000\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"size\"</span>\t\t: <span class=\"string\">\"0x100000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"secNamePat\"</span>  \t: [ <span class=\"string\">\"emacComm\"</span>, <span class=\"string\">\"NDK_PACKETMEM\"</span>, <span class=\"string\">\"NDK_OBJMEM\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cores\"</span>\t\t: [<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"permissions\"</span>\t: [<span class=\"string\">\"UR\"</span>, <span class=\"string\">\"UW\"</span>, <span class=\"string\">\"UX\"</span>, <span class=\"string\">\"SR\"</span>, <span class=\"string\">\"SW\"</span>, <span class=\"string\">\"SX\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cacheEnable\"</span>\t: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"prefetch\"</span>      : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"priority\"</span>\t: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"shared\"</span>\t: <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"name\"</span>\t\t: <span class=\"string\">\"L2SRAM\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"vaddr\"</span>\t\t: <span class=\"string\">\"0x800000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"paddr\"</span>\t\t: [ <span class=\"string\">\"0x800000\"</span>, <span class=\"string\">\"0x800000\"</span>, <span class=\"string\">\"0x800000\"</span>, <span class=\"string\">\"0x800000\"</span>, <span class=\"string\">\"0x800000\"</span>, <span class=\"string\">\"0x800000\"</span>, <span class=\"string\">\"0x800000\"</span>, <span class=\"string\">\"0x800000\"</span> ],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"size\"</span>\t\t: <span class=\"string\">\"0x80000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"secNamePat\"</span>  \t: [ <span class=\"string\">\"resmgr\"</span>, <span class=\"string\">\"cio\"</span>, <span class=\"string\">\"args\"</span>, <span class=\"string\">\"cppi\"</span>, <span class=\"string\">\"qmss\"</span>, <span class=\"string\">\"^\\\\.far\\\\.\"</span>, <span class=\"string\">\"bss\"</span>, <span class=\"string\">\"neardata\"</span>, <span class=\"string\">\"rodata\"</span>, <span class=\"string\">\"fardata\"</span>, <span class=\"string\">\"defaultStackSection\"</span>, <span class=\"string\">\"stack\"</span>, <span class=\"string\">\"plt\"</span>, <span class=\"string\">\"platform_lib\"</span>, <span class=\"string\">\"vecs\"</span>, <span class=\"string\">\"switch\"</span>,<span class=\"string\">\"nimu_eth_ll2\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cores\"</span>\t\t: [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"permissions\"</span>\t: [<span class=\"string\">\"UR\"</span>, <span class=\"string\">\"UW\"</span>, <span class=\"string\">\"UX\"</span>, <span class=\"string\">\"SR\"</span>, <span class=\"string\">\"SW\"</span>, <span class=\"string\">\"SX\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cacheEnable\"</span>\t: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"prefetch\"</span>      : <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"priority\"</span>\t: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"shared\"</span>\t: <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"string\">\"applications\"</span> : [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"name\"</span>\t\t : <span class=\"string\">\"master\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"fileName\"</span>       : <span class=\"string\">\"../../../ipc/evmc6678l/master/Debug/image_processing_evmc6678l_master.out\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"libPath\"</span>        : <span class=\"string\">\"../../../ipc/evmc6678l/master/Debug\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"allowedCores\"</span>   : [<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"name\"</span>\t\t : <span class=\"string\">\"slave\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"fileName\"</span>       : <span class=\"string\">\"../../../ipc/evmc6678l/slave/Debug/image_processing_evmc6678l_slave.out\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"libPath\"</span>        : <span class=\"string\">\"../../../ipc/evmc6678l/slave/Debug\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"allowedCores\"</span>   : [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"string\">\"appDeployment\"</span> : [</span><br><span class=\"line\">\t\t<span class=\"string\">\"master\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"slave\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"slave\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"slave\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"slave\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"slave\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"slave\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"slave\"</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改好后，再msys中输入： </p>\n<blockquote>\n<p>cd /c/ti/mcsdk_2_01_02_06/demos/image_processing/utils/mad/evmc6678l/<br>./build_mad_image.bat  </p>\n</blockquote>\n<p>可以看到再images目录下生产了.bin文件。接下来需要将.bin文件烧写到nor flash中，由于我使用的是IBL NOR Flash启动方式，还需要对IBL进行一定的配置:</p>\n<blockquote>\n<p>startAddress = 0x9e000000<br>branchAddress = 0x9e001040</p>\n</blockquote>\n<p>按照之前配置IBL的方法将norflash中的上述部分修改成上面的地址。然后利用nor writer将.bin文件烧入nor flash。将网线连接到路由器，启动板子，可以看到上面的效果。</p>\n<h2 id=\"Led-play-例程\"><a href=\"#Led-play-例程\" class=\"headerlink\" title=\"Led_play 例程\"></a>Led_play 例程</h2><p>　　除了上面的例程外，我还从网上下载了Led灯闪烁例程，并且自己修改成两个核上运行程序，但是由于例程中的一些问题，使得程序一直无法正常运行，后来查找到问题，修改后正常工作。<br>　　首先是将Led_play例程改成循环点亮改成单灯闪烁。</p>\n<pre><code class=\"C\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; length; i++) {\n    <span class=\"keyword\">if</span> (platform_uart_write(message[i]) != Platform_EOK) {\n        <span class=\"keyword\">return</span>;\n    }\n}\n\n<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;p_info.led[PLATFORM_USER_LED_CLASS].count;i++)\n{\n    platform_led(i, PLATFORM_LED_OFF, PLATFORM_USER_LED_CLASS);\n}\n<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) {\n    platform_led(led_no, PLATFORM_LED_ON, PLATFORM_USER_LED_CLASS);\n    platform_delay(<span class=\"number\">150000</span>);\n    platform_led(led_no, PLATFORM_LED_OFF, PLATFORM_USER_LED_CLASS);\n    platform_delay(<span class=\"number\">150000</span>);\n    <span class=\"comment\">//led_no = (led_no) % p_info.led[PLATFORM_USER_LED_CLASS].count;</span>\n}\n</code></pre>\n<p>　　接着，修改例程中导致程序无法在core0以外运行的错误:</p>\n<pre><code class=\"C\"><span class=\"comment\">//memset(&amp;init_flags, 0x01, sizeof(platform_init_flags));  错误</span>\n<span class=\"built_in\">memset</span>(&amp;init_flags, <span class=\"number\">0x00</span>, <span class=\"keyword\">sizeof</span>(platform_init_flags));\n<span class=\"built_in\">memset</span>(&amp;init_config, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(platform_init_config));\n</code></pre>\n<p>　　原来的初始化代码会导致将程序在load到core0以外的core时，会abort，无法运行。（因此我利用MAP生成的.bin一直无法正常工作，我还以为时MAP工具配置的问题，查找了很久，最后才发现~……~，一开始在core0正常运行了，就想当然地认为能正常在其它core上跑，事实证明不能想当然~_~）。</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"预览生成的-bin文件执行效果\"><a href=\"#预览生成的-bin文件执行效果\" class=\"headerlink\" title=\"预览生成的.bin文件执行效果\"></a>预览生成的.bin文件执行效果</h3><p>　　生成的.bin文件可以在CSS中先测试是否能够正常使用。步骤如下：</p>\n<blockquote>\n<ol>\n<li>连接core0，执行C6678L.gel初始化脚本。  </li>\n<li>在memory browser中输入0x9E000000,Load memory，将.bin文件烧写进去。  </li>\n<li>点击core0，在Register窗口中找到PC寄存器，将其值改为0x9E001040。  </li>\n<li>run &gt;resume  </li>\n</ol>\n</blockquote>\n<p>　　这样可以看到多核程序正常跑起来。</p>\n<h3 id=\"单镜像\"><a href=\"#单镜像\" class=\"headerlink\" title=\"单镜像\"></a>单镜像</h3><p>　　MAD方式可以将多个镜像连接成一个，并自动将数据加载到各个core指定的内存上，除了这个方法外，还可以将同一份代码同时加载到多个core的内存中，并通过代码判断当前的核心，从而执行不同的程序。但是具体还没实践过，留待实验。</p>\n<h3 id=\"MAD启动流程\"><a href=\"#MAD启动流程\" class=\"headerlink\" title=\"MAD启动流程\"></a>MAD启动流程</h3><p>　　<a href=\"https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/346728?Does-program-always-start-from-core-0-for-C6678-\" target=\"_blank\" rel=\"noopener\">参考一</a><br>　　<a href=\"https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/233429?Some-questiones-about-bootloader-in-C6678\" target=\"_blank\" rel=\"noopener\">参考二</a><br>　　Rom bootloader会在所有的core上运行，但是执行不同的功能。在core0,会执行真正的boot loader；在core1，会执行一条idle指令，等待core0将其唤醒。<br>　　IBL存储在EEPROM上，有RBL启动执行，但是IBL只在core0上执行。<br>　　启动时RBL启动IBL并执行，IBL将NOR FLASH上的MAD image下载到DDR上，同时由上面配置IBL的步骤可以知道，接下来IBL会跳转到一个执行程序入口地址，在该配置下，就是MAD Loader。<br>　　MAD Loader的责任就是解析ROMFS image，将各个数据段加载到它们的执行地址，并在各个指定的core上启动程序的执行。（MAD Loader帮我们完成了唤醒其它core执行的任务）</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"利用MAD工具实现多核启动\"><a href=\"#利用MAD工具实现多核启动\" class=\"headerlink\" title=\"利用MAD工具实现多核启动\"></a>利用MAD工具实现多核启动</h2><p>　　先总体地说一下MAD工具的作用：对于多个DSP核心，可能我们有对应的多个project，生成了多个.out文件，我们想把不同的projecct放在不同的core上运行。调试的时候我们可以通过仿真器手动把代码文件load到对应core上让它运行，但是怎么让板子在启动的时候自动加载代码到各个core上，这就是MAD工具解决的问题。除此之外，这个工具还能通过共享一部分代码文件达到节约内存的目的。<br></p>","more":"<p></p>\n<h3 id=\"MAD（Multicore-Application-Deployment）-工具\"><a href=\"#MAD（Multicore-Application-Deployment）-工具\" class=\"headerlink\" title=\"MAD（Multicore Application Deployment） 工具\"></a>MAD（Multicore Application Deployment） 工具</h3><p>　　MAD工具主要包括两个部分：MAP Tools，MAD Loader。其中MAP Tools主要是在构建镜像文件时使用（.bin，Build Time Utility），MAD Loader主要是在板子上电启动之后，负责将镜像文件搬到各个core的内存上，并让各个core从起始代码段开始执行。<br>　　同时，MAD工具还有两种使用模式：Prelinker-bypass， Prelinker。Prelinker-bypass模式下，MAP Tools不会为应用程序的各个段分配内存，也不会进行地址绑定（调用prelinker），这同时也就要求我们已经提前将这些工作做好了。Prelinker模式下，则相反，会通过deploy.json配置文件进行相关的配置。</p>\n  <div align=\"center\"><img src=\"/2018/07/09/boot-multicore/boot_multicore_madprocedure.png\" height=\"400px\" width=\"600px\" alt=\"img\"></div>  \n\n<p>　　<a href=\"http://processors.wiki.ti.com/index.php/MAD_Utils_User_Guide\" target=\"_blank\" rel=\"noopener\">具体介绍</a>。\n　　</p>\n<h3 id=\"image-processing-例程\"><a href=\"#image-processing-例程\" class=\"headerlink\" title=\"image_processing 例程\"></a>image_processing 例程</h3><p>　　该例程位于mcsdk &gt;demos &gt;image_processing &gt;utils &gt;mad &gt;evmc6678l下。默认在images目录下，已经有生成好的mcip-plbp-c6678-le.bin文件了，可以直接使用该文件，将其烧写到nor flash上，并进行一定的配置（后述），便可以在板子上跑起来该多核例程。效果如下：</p>\n<div align=\"center\"><img src=\"/2018/07/09/boot-multicore/multi_image_html.png\" height=\"400px\" width=\"600px\" alt=\"img\"></div><br>　　由于该例程使用网线完成图片的传输，因而需要像之前的HUA例程一样进行配置，之前我使用的是静态IP方式，这次使用DHCP方式，该方式需要将板子的网线接到路由器，由路由器的DHCP server来给板子分配IP，板子启动时com4的界面如下：<br><div align=\"center\"><img src=\"/2018/07/09/boot-multicore/boot_multicore_image_com4.png\" height=\"400px\" width=\"350px\" alt=\"img\"></div><br>　　上图中的IP地址即为板子的IP，可以在浏览器中通过该IP访问到第一个图的网页。<br>　　这个例程的功能就是，对图片（只支持bmp图片，可以将图片在画图中打开，另存为bmp图片）进行边缘检测处理,可以选择使用几个dsp核心对图片进行处理，可以看到使用的core越多，速度越快，处理结果（效果似乎一般）及对比如下：<br><div align=\"center\"><img src=\"/2018/07/09/boot-multicore/boot_multicore_image_result.png\" height=\"450px\" width=\"600px\" alt=\"img\"></div><br><div align=\"center\"><img src=\"/2018/07/09/boot-multicore/multi_image_8cores.png\" height=\"350px\" width=\"450px\" alt=\"img\"></div><br><div align=\"center\"><img src=\"/2018/07/09/boot-multicore/multi_image_1core.png\" height=\"350px\" width=\"450px\" alt=\"img\"></div>  \n\n<p>　　下面说一下利用该目录下，config-files目录下的配置文件，使用MAP Tools工具重新生成mcip-plbp-c6678-le.bin的流程.  </p>\n<blockquote>\n<p>windows环境中需要安装mingw、python和Msys（模拟GNU环境）这个步骤另开blog记录吧。<br>修改build_mad_image.bat自动生成脚本,如下根据自己的编译器地址修改目录  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@set PATH=&quot;C:\\ti\\ccsv8\\tools\\compiler\\c6000_7.4.23\\bin&quot;;%PATH%</span><br><span class=\"line\"></span><br><span class=\"line\">@rd /s /q tmp</span><br><span class=\"line\"></span><br><span class=\"line\">python2 ..\\..\\..\\..\\..\\tools\\boot_loader\\mad-utils\\map-tool\\maptool.py config-files\\maptoolCfg_evmc6678l.json</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>修改maptoolCfg_evmc6678l.json配置文件  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"deploymentCfgFile\"</span>     : <span class=\"string\">\"config-files/deployment_template_evmc6678l.json\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"LoadImageName\"</span>         : <span class=\"string\">\"mcip-c6678-le.bin\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"prelinkExe\"</span>            : <span class=\"string\">\"prelink6x\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"stripExe\"</span>              : <span class=\"string\">\"strip6x\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ofdTool\"</span>               : <span class=\"string\">\"ofd6x\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"malApp\"</span>                : <span class=\"string\">\"../../../../../tools/boot_loader/mad-utils/mad-loader/bin/C6678/le/mal_app.exe\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"nmlLoader\"</span>             : <span class=\"string\">\"../../../../../tools/boot_loader/mad-utils/mad-loader/bin/C6678/le/nml.exe\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>修改deployment_template_evmc6678l.json文件,注意原文件中，L2SRAM段中的secnamepat中缺少了”nimu_eth_ll2”，不加上会报错。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"deviceName\"</span> : <span class=\"string\">\"C6678\"</span>,</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"string\">\"partitions\"</span> : [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"name\"</span>\t\t: <span class=\"string\">\"DDR3-ROMFS\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"vaddr\"</span>\t\t:  <span class=\"string\">\"0x9e000000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"paddr\"</span>\t\t: [ <span class=\"string\">\"0x81e000000\"</span>, <span class=\"string\">\"0x81e000000\"</span>, <span class=\"string\">\"0x81e000000\"</span>, <span class=\"string\">\"0x81e000000\"</span>, <span class=\"string\">\"0x81e000000\"</span>, <span class=\"string\">\"0x81e000000\"</span>, <span class=\"string\">\"0x81e000000\"</span>, <span class=\"string\">\"0x81e000000\"</span>] ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"size\"</span>\t\t: <span class=\"string\">\"0x1000000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"secNamePat\"</span>  \t: [<span class=\"string\">\"text\"</span>, <span class=\"string\">\"const\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cores\"</span>\t\t: [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"permissions\"</span>\t: [<span class=\"string\">\"UR\"</span>, <span class=\"string\">\"UX\"</span>, <span class=\"string\">\"SR\"</span>, <span class=\"string\">\"SX\"</span>],  </span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cacheEnable\"</span>\t: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"prefetch\"</span>      : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"priority\"</span>\t: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"shared\"</span>\t: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"loadPartition\"</span> : <span class=\"literal\">true</span> </span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"name\"</span>\t\t: <span class=\"string\">\"DDR3-HEAP\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"vaddr\"</span>\t\t:  <span class=\"string\">\"0x88000000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"paddr\"</span>\t\t: [<span class=\"string\">\"0x808000000\"</span>] ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"size\"</span>\t\t: <span class=\"string\">\"0x8000000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"secNamePat\"</span>  \t: [<span class=\"string\">\"systemHeapMaster\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cores\"</span>\t\t: [<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"permissions\"</span>\t: [<span class=\"string\">\"UR\"</span>, <span class=\"string\">\"UW\"</span>, <span class=\"string\">\"SR\"</span>, <span class=\"string\">\"SW\"</span>],  </span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cacheEnable\"</span>\t: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"prefetch\"</span>      : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"priority\"</span>\t: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"shared\"</span>\t: <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"name\"</span>\t\t: <span class=\"string\">\"DDR3-DATA\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"vaddr\"</span>\t\t:  <span class=\"string\">\"0x82000000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"paddr\"</span>\t\t: [<span class=\"string\">\"0x802000000\"</span>] ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"size\"</span>\t\t: <span class=\"string\">\"0x1000000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"secNamePat\"</span>  \t: [<span class=\"string\">\"WEBDATA\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cores\"</span>\t\t: [<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"permissions\"</span>\t: [<span class=\"string\">\"UR\"</span>, <span class=\"string\">\"UW\"</span>, <span class=\"string\">\"SR\"</span>,<span class=\"string\">\"SW\"</span>],  </span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cacheEnable\"</span>\t: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"prefetch\"</span>      : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"priority\"</span>\t: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"shared\"</span>\t: <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"name\"</span>\t\t: <span class=\"string\">\"MSMCSRAM_MASTER\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"vaddr\"</span>\t\t: <span class=\"string\">\"0xc000000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"paddr\"</span>\t\t: [ <span class=\"string\">\"0xc000000\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"size\"</span>\t\t: <span class=\"string\">\"0x100000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"secNamePat\"</span>  \t: [ <span class=\"string\">\"emacComm\"</span>, <span class=\"string\">\"NDK_PACKETMEM\"</span>, <span class=\"string\">\"NDK_OBJMEM\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cores\"</span>\t\t: [<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"permissions\"</span>\t: [<span class=\"string\">\"UR\"</span>, <span class=\"string\">\"UW\"</span>, <span class=\"string\">\"UX\"</span>, <span class=\"string\">\"SR\"</span>, <span class=\"string\">\"SW\"</span>, <span class=\"string\">\"SX\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cacheEnable\"</span>\t: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"prefetch\"</span>      : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"priority\"</span>\t: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"shared\"</span>\t: <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"name\"</span>\t\t: <span class=\"string\">\"L2SRAM\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"vaddr\"</span>\t\t: <span class=\"string\">\"0x800000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"paddr\"</span>\t\t: [ <span class=\"string\">\"0x800000\"</span>, <span class=\"string\">\"0x800000\"</span>, <span class=\"string\">\"0x800000\"</span>, <span class=\"string\">\"0x800000\"</span>, <span class=\"string\">\"0x800000\"</span>, <span class=\"string\">\"0x800000\"</span>, <span class=\"string\">\"0x800000\"</span>, <span class=\"string\">\"0x800000\"</span> ],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"size\"</span>\t\t: <span class=\"string\">\"0x80000\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"secNamePat\"</span>  \t: [ <span class=\"string\">\"resmgr\"</span>, <span class=\"string\">\"cio\"</span>, <span class=\"string\">\"args\"</span>, <span class=\"string\">\"cppi\"</span>, <span class=\"string\">\"qmss\"</span>, <span class=\"string\">\"^\\\\.far\\\\.\"</span>, <span class=\"string\">\"bss\"</span>, <span class=\"string\">\"neardata\"</span>, <span class=\"string\">\"rodata\"</span>, <span class=\"string\">\"fardata\"</span>, <span class=\"string\">\"defaultStackSection\"</span>, <span class=\"string\">\"stack\"</span>, <span class=\"string\">\"plt\"</span>, <span class=\"string\">\"platform_lib\"</span>, <span class=\"string\">\"vecs\"</span>, <span class=\"string\">\"switch\"</span>,<span class=\"string\">\"nimu_eth_ll2\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cores\"</span>\t\t: [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"permissions\"</span>\t: [<span class=\"string\">\"UR\"</span>, <span class=\"string\">\"UW\"</span>, <span class=\"string\">\"UX\"</span>, <span class=\"string\">\"SR\"</span>, <span class=\"string\">\"SW\"</span>, <span class=\"string\">\"SX\"</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cacheEnable\"</span>\t: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"prefetch\"</span>      : <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"priority\"</span>\t: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"shared\"</span>\t: <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"string\">\"applications\"</span> : [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"name\"</span>\t\t : <span class=\"string\">\"master\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"fileName\"</span>       : <span class=\"string\">\"../../../ipc/evmc6678l/master/Debug/image_processing_evmc6678l_master.out\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"libPath\"</span>        : <span class=\"string\">\"../../../ipc/evmc6678l/master/Debug\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"allowedCores\"</span>   : [<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"name\"</span>\t\t : <span class=\"string\">\"slave\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"fileName\"</span>       : <span class=\"string\">\"../../../ipc/evmc6678l/slave/Debug/image_processing_evmc6678l_slave.out\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"libPath\"</span>        : <span class=\"string\">\"../../../ipc/evmc6678l/slave/Debug\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"allowedCores\"</span>   : [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"string\">\"appDeployment\"</span> : [</span><br><span class=\"line\">\t\t<span class=\"string\">\"master\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"slave\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"slave\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"slave\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"slave\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"slave\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"slave\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"slave\"</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改好后，再msys中输入： </p>\n<blockquote>\n<p>cd /c/ti/mcsdk_2_01_02_06/demos/image_processing/utils/mad/evmc6678l/<br>./build_mad_image.bat  </p>\n</blockquote>\n<p>可以看到再images目录下生产了.bin文件。接下来需要将.bin文件烧写到nor flash中，由于我使用的是IBL NOR Flash启动方式，还需要对IBL进行一定的配置:</p>\n<blockquote>\n<p>startAddress = 0x9e000000<br>branchAddress = 0x9e001040</p>\n</blockquote>\n<p>按照之前配置IBL的方法将norflash中的上述部分修改成上面的地址。然后利用nor writer将.bin文件烧入nor flash。将网线连接到路由器，启动板子，可以看到上面的效果。</p>\n<h2 id=\"Led-play-例程\"><a href=\"#Led-play-例程\" class=\"headerlink\" title=\"Led_play 例程\"></a>Led_play 例程</h2><p>　　除了上面的例程外，我还从网上下载了Led灯闪烁例程，并且自己修改成两个核上运行程序，但是由于例程中的一些问题，使得程序一直无法正常运行，后来查找到问题，修改后正常工作。<br>　　首先是将Led_play例程改成循环点亮改成单灯闪烁。</p>\n<pre><code class=\"C\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; length; i++) {\n    <span class=\"keyword\">if</span> (platform_uart_write(message[i]) != Platform_EOK) {\n        <span class=\"keyword\">return</span>;\n    }\n}\n\n<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;p_info.led[PLATFORM_USER_LED_CLASS].count;i++)\n{\n    platform_led(i, PLATFORM_LED_OFF, PLATFORM_USER_LED_CLASS);\n}\n<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) {\n    platform_led(led_no, PLATFORM_LED_ON, PLATFORM_USER_LED_CLASS);\n    platform_delay(<span class=\"number\">150000</span>);\n    platform_led(led_no, PLATFORM_LED_OFF, PLATFORM_USER_LED_CLASS);\n    platform_delay(<span class=\"number\">150000</span>);\n    <span class=\"comment\">//led_no = (led_no) % p_info.led[PLATFORM_USER_LED_CLASS].count;</span>\n}\n</code></pre>\n<p>　　接着，修改例程中导致程序无法在core0以外运行的错误:</p>\n<pre><code class=\"C\"><span class=\"comment\">//memset(&amp;init_flags, 0x01, sizeof(platform_init_flags));  错误</span>\n<span class=\"built_in\">memset</span>(&amp;init_flags, <span class=\"number\">0x00</span>, <span class=\"keyword\">sizeof</span>(platform_init_flags));\n<span class=\"built_in\">memset</span>(&amp;init_config, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(platform_init_config));\n</code></pre>\n<p>　　原来的初始化代码会导致将程序在load到core0以外的core时，会abort，无法运行。（因此我利用MAP生成的.bin一直无法正常工作，我还以为时MAP工具配置的问题，查找了很久，最后才发现~……~，一开始在core0正常运行了，就想当然地认为能正常在其它core上跑，事实证明不能想当然~_~）。</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"预览生成的-bin文件执行效果\"><a href=\"#预览生成的-bin文件执行效果\" class=\"headerlink\" title=\"预览生成的.bin文件执行效果\"></a>预览生成的.bin文件执行效果</h3><p>　　生成的.bin文件可以在CSS中先测试是否能够正常使用。步骤如下：</p>\n<blockquote>\n<ol>\n<li>连接core0，执行C6678L.gel初始化脚本。  </li>\n<li>在memory browser中输入0x9E000000,Load memory，将.bin文件烧写进去。  </li>\n<li>点击core0，在Register窗口中找到PC寄存器，将其值改为0x9E001040。  </li>\n<li>run &gt;resume  </li>\n</ol>\n</blockquote>\n<p>　　这样可以看到多核程序正常跑起来。</p>\n<h3 id=\"单镜像\"><a href=\"#单镜像\" class=\"headerlink\" title=\"单镜像\"></a>单镜像</h3><p>　　MAD方式可以将多个镜像连接成一个，并自动将数据加载到各个core指定的内存上，除了这个方法外，还可以将同一份代码同时加载到多个core的内存中，并通过代码判断当前的核心，从而执行不同的程序。但是具体还没实践过，留待实验。</p>\n<h3 id=\"MAD启动流程\"><a href=\"#MAD启动流程\" class=\"headerlink\" title=\"MAD启动流程\"></a>MAD启动流程</h3><p>　　<a href=\"https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/346728?Does-program-always-start-from-core-0-for-C6678-\" target=\"_blank\" rel=\"noopener\">参考一</a><br>　　<a href=\"https://e2e.ti.com/support/dsp/c6000_multi-core_dsps/f/639/t/233429?Some-questiones-about-bootloader-in-C6678\" target=\"_blank\" rel=\"noopener\">参考二</a><br>　　Rom bootloader会在所有的core上运行，但是执行不同的功能。在core0,会执行真正的boot loader；在core1，会执行一条idle指令，等待core0将其唤醒。<br>　　IBL存储在EEPROM上，有RBL启动执行，但是IBL只在core0上执行。<br>　　启动时RBL启动IBL并执行，IBL将NOR FLASH上的MAD image下载到DDR上，同时由上面配置IBL的步骤可以知道，接下来IBL会跳转到一个执行程序入口地址，在该配置下，就是MAD Loader。<br>　　MAD Loader的责任就是解析ROMFS image，将各个数据段加载到它们的执行地址，并在各个指定的core上启动程序的执行。（MAD Loader帮我们完成了唤醒其它core执行的任务）</p>"}],"PostAsset":[{"_id":"source/_posts/Github-Pages-hexo/3.png","slug":"3.png","post":"cjjohyvhk0000hfzy80znpzva","modified":1,"renderable":0},{"_id":"source/_posts/New-to-C6678-CSS/hua_com4.png","slug":"hua_com4.png","post":"cjjohyvhn0001hfzyoi35105m","modified":1,"renderable":0},{"_id":"source/_posts/New-to-C6678-CSS/hua_html_index.png","slug":"hua_html_index.png","post":"cjjohyvhn0001hfzyoi35105m","modified":1,"renderable":0},{"_id":"source/_posts/Github-Pages-hexo/1.png","post":"cjjohyvhk0000hfzy80znpzva","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Github-Pages-hexo/2.png","post":"cjjohyvhk0000hfzy80znpzva","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/New-to-C6678-CSS/hua_com4_config.png","post":"cjjohyvhn0001hfzyoi35105m","slug":"hua_com4_config.png","modified":1,"renderable":1},{"_id":"source/_posts/New-to-C6678-CSS/hua_ipconfig.png","post":"cjjohyvhn0001hfzyoi35105m","slug":"hua_ipconfig.png","modified":1,"renderable":1},{"_id":"source/_posts/Boot-Singlecore/boot_table_format.png","post":"cjjohyvi8000chfzy4vkmsk23","slug":"boot_table_format.png","modified":1,"renderable":1},{"_id":"source/_posts/Boot-Singlecore/post_result.png","post":"cjjohyvi8000chfzy4vkmsk23","slug":"post_result.png","modified":1,"renderable":1},{"_id":"source/_posts/boot-multicore/boot_multicore_image_com4.png","post":"cjjohyvia000dhfzywaow5fzo","slug":"boot_multicore_image_com4.png","modified":1,"renderable":1},{"_id":"source/_posts/boot-multicore/boot_multicore_image_result.png","slug":"boot_multicore_image_result.png","post":"cjjohyvia000dhfzywaow5fzo","modified":1,"renderable":0},{"_id":"source/_posts/boot-multicore/boot_multicore_madprocedure.png","post":"cjjohyvia000dhfzywaow5fzo","slug":"boot_multicore_madprocedure.png","modified":1,"renderable":1},{"_id":"source/_posts/boot-multicore/multi_image_1core.png","post":"cjjohyvia000dhfzywaow5fzo","slug":"multi_image_1core.png","modified":1,"renderable":1},{"_id":"source/_posts/boot-multicore/multi_image_8cores.png","post":"cjjohyvia000dhfzywaow5fzo","slug":"multi_image_8cores.png","modified":1,"renderable":1},{"_id":"source/_posts/boot-multicore/multi_image_html.png","post":"cjjohyvia000dhfzywaow5fzo","slug":"multi_image_html.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjjohyvhk0000hfzy80znpzva","tag_id":"cjjohyvhp0002hfzyetf2mrbi","_id":"cjjohyvhz0006hfzyeqhci0fh"},{"post_id":"cjjohyvhn0001hfzyoi35105m","tag_id":"cjjohyvhx0005hfzyaqwt7crh","_id":"cjjohyvi20008hfzyevam2ra1"},{"post_id":"cjjohyvhr0003hfzy2gwu1e9f","tag_id":"cjjohyvi10007hfzyiuz0e6wm","_id":"cjjohyvi3000ahfzy5qg4xbe1"},{"post_id":"cjjohyvht0004hfzyfrxqy910","tag_id":"cjjohyvi10007hfzyiuz0e6wm","_id":"cjjohyvi4000bhfzyvgoimba1"},{"post_id":"cjjohyvi8000chfzy4vkmsk23","tag_id":"cjjohyvhx0005hfzyaqwt7crh","_id":"cjjohyvia000ehfzy06odkwpw"},{"post_id":"cjjohyvia000dhfzywaow5fzo","tag_id":"cjjohyvhx0005hfzyaqwt7crh","_id":"cjjohyvib000fhfzyuf98l0fl"}],"Tag":[{"name":"搭建博客","_id":"cjjohyvhp0002hfzyetf2mrbi"},{"name":"evmc6678l","_id":"cjjohyvhx0005hfzyaqwt7crh"},{"name":"计算机网络","_id":"cjjohyvi10007hfzyiuz0e6wm"}]}}